/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Annotation } from "./Annotation";
import { Period } from "./Period";
import { CodeableConcept } from "./CodeableConcept";
import { SimpleQuantity } from "./SimpleQuantity";
import { dateTime } from "./dateTime";
import { Range } from "./Range";
import { Timing } from "./Timing";
import { Quantity } from "./Quantity";
import { time } from "./time";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { SampledData } from "./SampledData";
import { Ratio } from "./Ratio";
import { instant } from "./instant";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** Measurements and simple assertions made about a patient, device or other subject. */
export interface Observation extends DomainResource {
    resourceType: 'Observation';
    /** Classification of  type of observation */
    category?: Array<CodeableConcept>;
    _issued?: Element;
    referenceRange?: Array<ObservationReferenceRange>;
    /** Related resource that belongs to the Observation group */
    hasMember?: Array<Reference>;
    _effectiveDateTime?: Element;
    _valueBoolean?: Element;
    /** Related measurements the observation is made from */
    derivedFrom?: Array<Reference>;
    /** High, low, normal, etc. */
    interpretation?: Array<CodeableConcept>;
    /** Healthcare event during which this observation is made */
    encounter?: Reference<'Encounter'>;
    /** How it was done */
    method?: CodeableConcept;
    valueTime?: time;
    /** Specimen used for this observation */
    specimen?: Reference<'Specimen'>;
    _valueString?: Element;
    valueQuantity?: Quantity;
    valueString?: string;
    _status?: Element;
    valueRatio?: Ratio;
    valueBoolean?: boolean;
    valueDateTime?: dateTime;
    /** Component results */
    component?: Array<ObservationComponent>;
    /** Comments about the observation */
    note?: Array<Annotation>;
    _valueDateTime?: Element;
    valueSampledData?: SampledData;
    effectiveDateTime?: dateTime;
    /** registered | preliminary | final | amended + */
    status: `${ObservationStatus}`;
    _valueTime?: Element;
    /** Type of observation (code / type) */
    code: CodeableConcept;
    /** Business Identifier for observation */
    identifier?: Array<Identifier>;
    effectiveTiming?: Timing;
    valueCodeableConcept?: CodeableConcept;
    /** Observed body part */
    bodySite?: CodeableConcept;
    /** What the observation is about, when it is not about the subject of record */
    focus?: Array<Reference>;
    _effectiveInstant?: Element;
    /** Date/Time this version was made available */
    issued?: instant;
    valuePeriod?: Period;
    /** (Measurement) Device */
    device?: Reference<'Device' | 'DeviceMetric'>;
    effectiveInstant?: instant;
    /** Fulfills plan, proposal or order */
    basedOn?: Array<Reference>;
    valueRange?: Range;
    /** Part of referenced event */
    partOf?: Array<Reference>;
    valueInteger?: integer;
    /** Who and/or what the observation is about */
    subject?: Reference<'Patient' | 'Device' | 'Location' | 'Group'>;
    /** Who is responsible for the observation */
    performer?: Array<Reference>;
    /** Why the result is missing */
    dataAbsentReason?: CodeableConcept;
    effectivePeriod?: Period;
    _valueInteger?: Element;
}
/** Component results */
export interface ObservationComponent extends BackboneElement {
    /** Provides guide for interpretation of component result */
    referenceRange?: Array<ObservationReferenceRange>;
    _valueBoolean?: Element;
    /** High, low, normal, etc. */
    interpretation?: Array<CodeableConcept>;
    valueTime?: time;
    _valueString?: Element;
    valueQuantity?: Quantity;
    valueString?: string;
    valueRatio?: Ratio;
    valueBoolean?: boolean;
    valueDateTime?: dateTime;
    _valueDateTime?: Element;
    valueSampledData?: SampledData;
    _valueTime?: Element;
    /** Type of component observation (code / type) */
    code: CodeableConcept;
    valueCodeableConcept?: CodeableConcept;
    valuePeriod?: Period;
    valueRange?: Range;
    valueInteger?: integer;
    /** Why the component result is missing */
    dataAbsentReason?: CodeableConcept;
    _valueInteger?: Element;
}
/** registered | preliminary | final | amended + */
export declare enum ObservationStatus {
    Amended = "amended",
    Cancelled = "cancelled",
    Corrected = "corrected",
    EnteredInError = "entered-in-error",
    Final = "final",
    Preliminary = "preliminary",
    Registered = "registered",
    Unknown = "unknown"
}
/** Provides guide for interpretation */
export interface ObservationReferenceRange extends BackboneElement {
    /** Low Range, if relevant */
    low?: SimpleQuantity;
    /** High Range, if relevant */
    high?: SimpleQuantity;
    /** Reference range qualifier */
    type?: CodeableConcept;
    /** Reference range population */
    appliesTo?: Array<CodeableConcept>;
    /** Applicable age range, if relevant */
    age?: Range;
    /** Text based reference range in an observation */
    text?: string;
    _text?: Element;
}
