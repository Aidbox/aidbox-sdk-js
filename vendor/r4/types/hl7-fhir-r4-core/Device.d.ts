/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Annotation } from "./Annotation";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { dateTime } from "./dateTime";
import { ContactPoint } from "./ContactPoint";
import { Quantity } from "./Quantity";
import { DomainResource } from "./DomainResource";
import { base64Binary } from "./base64Binary";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. */
export interface Device extends DomainResource {
    resourceType: 'Device';
    /** Patient to whom Device is affixed */
    patient?: Reference<'Patient'>;
    /** The reference to the definition for the device */
    definition?: Reference<'DeviceDefinition'>;
    /** Serial number assigned by the manufacturer */
    serialNumber?: string;
    /** The parent device */
    parent?: Reference<'Device'>;
    /** The name of the device as given by the manufacturer */
    deviceName?: Array<DeviceDeviceName>;
    _partNumber?: Element;
    /** The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties */
    property?: Array<DeviceProperty>;
    _modelNumber?: Element;
    _status?: Element;
    /** The part number of the device */
    partNumber?: string;
    /** The model number for the device */
    modelNumber?: string;
    _manufactureDate?: Element;
    /** The kind or type of device */
    type?: CodeableConcept;
    /** online | paused | standby | offline | not-ready | transduc-discon | hw-discon | off */
    statusReason?: Array<CodeableConcept>;
    /** The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication */
    specialization?: Array<DeviceSpecialization>;
    _expirationDate?: Element;
    /** The distinct identification string */
    distinctIdentifier?: string;
    /** Device notes and comments */
    note?: Array<Annotation>;
    /** active | inactive | entered-in-error | unknown */
    status?: `${DeviceStatus}`;
    /** Safety Characteristics of Device */
    safety?: Array<CodeableConcept>;
    /** Lot number of manufacture */
    lotNumber?: string;
    /** Network address to contact device */
    url?: uri;
    _distinctIdentifier?: Element;
    /** Instance identifier */
    identifier?: Array<Identifier>;
    /** Name of device manufacturer */
    manufacturer?: string;
    _manufacturer?: Element;
    _serialNumber?: Element;
    /** The actual design of the device or software version running on the device */
    version?: Array<DeviceVersion>;
    _lotNumber?: Element;
    /** Where the device is found */
    location?: Reference<'Location'>;
    /** Details for human/organization for support */
    contact?: Array<ContactPoint>;
    /** Date when the device was made */
    manufactureDate?: dateTime;
    /** Organization responsible for device */
    owner?: Reference<'Organization'>;
    _url?: Element;
    /** Date and time of expiry of this device (if applicable) */
    expirationDate?: dateTime;
    /** Unique Device Identifier (UDI) Barcode string */
    udiCarrier?: Array<DeviceUdiCarrier>;
}
/** udi-label-name | user-friendly-name | patient-reported-name | manufacturer-name | model-name | other */
export declare enum DeviceDevicenameType {
    ManufacturerName = "manufacturer-name",
    ModelName = "model-name",
    Other = "other",
    PatientReportedName = "patient-reported-name",
    UdiLabelName = "udi-label-name",
    UserFriendlyName = "user-friendly-name"
}
/** The name of the device as given by the manufacturer */
export interface DeviceDeviceName extends BackboneElement {
    /** The name of the device */
    name: string;
    _name?: Element;
    /** udi-label-name | user-friendly-name | patient-reported-name | manufacturer-name | model-name | other */
    type: `${DeviceDevicenameType}`;
    _type?: Element;
}
/** The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties */
export interface DeviceProperty extends BackboneElement {
    /** Code that specifies the property DeviceDefinitionPropetyCode (Extensible) */
    type: CodeableConcept;
    /** Property value as a quantity */
    valueQuantity?: Array<Quantity>;
    /** Property value as a code, e.g., NTP4 (synced to NTP) */
    valueCode?: Array<CodeableConcept>;
}
/** The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication */
export interface DeviceSpecialization extends BackboneElement {
    /** The standard that is used to operate and communicate */
    systemType: CodeableConcept;
    /** The version of the standard that is used to operate and communicate */
    version?: string;
    _version?: Element;
}
/** active | inactive | entered-in-error | unknown */
export declare enum DeviceStatus {
    Active = "active",
    EnteredInError = "entered-in-error",
    Inactive = "inactive",
    Unknown = "unknown"
}
/** The actual design of the device or software version running on the device */
export interface DeviceVersion extends BackboneElement {
    /** The type of the device version */
    type?: CodeableConcept;
    /** A single component of the device version */
    component?: Identifier;
    /** The version text */
    value: string;
    _value?: Element;
}
/** barcode | rfid | manual + */
export declare enum DeviceUdicarrierEntrytype {
    Barcode = "barcode",
    Card = "card",
    Manual = "manual",
    Rfid = "rfid",
    SelfReported = "self-reported",
    Unknown = "unknown"
}
/** Unique Device Identifier (UDI) Barcode string */
export interface DeviceUdiCarrier extends BackboneElement {
    _jurisdiction?: Element;
    /** Mandatory fixed portion of UDI */
    deviceIdentifier?: string;
    _entryType?: Element;
    /** Regional UDI authority */
    jurisdiction?: uri;
    /** barcode | rfid | manual + */
    entryType?: `${DeviceUdicarrierEntrytype}`;
    /** UDI Issuing Organization */
    issuer?: uri;
    _deviceIdentifier?: Element;
    /** UDI Machine Readable Barcode String */
    carrierAIDC?: base64Binary;
    _carrierHRF?: Element;
    _carrierAIDC?: Element;
    _issuer?: Element;
    /** UDI Human Readable Barcode String */
    carrierHRF?: string;
}
