/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Period } from "./Period";
import { CodeableConcept } from "./CodeableConcept";
import { dateTime } from "./dateTime";
import { Quantity } from "./Quantity";
import { canonical } from "./canonical";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
export interface MeasureReport extends DomainResource {
    resourceType: 'MeasureReport';
    /** What data was used to calculate the measure score */
    evaluatedResource?: Array<Reference>;
    _measure?: Element;
    /** When the report was generated */
    date?: dateTime;
    /** Measure results for each group */
    group?: Array<MeasureReportGroup>;
    _date?: Element;
    _type?: Element;
    _status?: Element;
    /** individual | subject-list | summary | data-collection */
    type: `${MeasureReportType}`;
    /** What measure was calculated */
    measure: canonical;
    /** Who is reporting the data */
    reporter?: Reference<'PractitionerRole' | 'Organization' | 'Location' | 'Practitioner'>;
    /** complete | pending | error */
    status: `${MeasureReportStatus}`;
    /** Additional identifier for the MeasureReport */
    identifier?: Array<Identifier>;
    /** What period the report covers */
    period: Period;
    /** increase | decrease */
    improvementNotation?: `${MeasureReportImprovementnotation}`;
    /** What individual(s) the report is for */
    subject?: Reference<'Patient' | 'PractitionerRole' | 'Device' | 'Location' | 'Practitioner' | 'RelatedPerson' | 'Group'>;
}
/** The populations in the group */
export interface MeasureReportPopulation extends BackboneElement {
    /** initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation */
    code?: CodeableConcept;
    /** Size of the population */
    count?: integer;
    _count?: Element;
    /** For subject-list reports, the subject results in this population */
    subjectResults?: Reference<'List'>;
}
/** Stratifier component values */
export interface MeasureReportComponent extends BackboneElement {
    /** What stratifier component of the group */
    code: CodeableConcept;
    /** The stratum component value, e.g. male */
    value: CodeableConcept;
}
/** Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components */
export interface MeasureReportStratum extends BackboneElement {
    /** The stratum value, e.g. male */
    value?: CodeableConcept;
    /** Stratifier component values */
    component?: Array<MeasureReportComponent>;
    /** Population results in this stratum */
    population?: Array<MeasureReportPopulation>;
    /** What score this stratum achieved */
    measureScore?: Quantity;
}
/** Stratification results */
export interface MeasureReportStratifier extends BackboneElement {
    /** What stratifier of the group */
    code?: Array<CodeableConcept>;
    /** Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components */
    stratum?: Array<MeasureReportStratum>;
}
/** Measure results for each group */
export interface MeasureReportGroup extends BackboneElement {
    /** Meaning of the group */
    code?: CodeableConcept;
    /** The populations in the group */
    population?: Array<MeasureReportPopulation>;
    /** What score this group achieved */
    measureScore?: Quantity;
    /** Stratification results */
    stratifier?: Array<MeasureReportStratifier>;
}
/** individual | subject-list | summary | data-collection */
export declare enum MeasureReportType {
    DataCollection = "data-collection",
    Individual = "individual",
    SubjectList = "subject-list",
    Summary = "summary"
}
/** complete | pending | error */
export declare enum MeasureReportStatus {
    Complete = "complete",
    Error = "error",
    Pending = "pending"
}
/** increase | decrease */
export declare enum MeasureReportImprovementnotation {
    Decrease = "decrease",
    Increase = "increase"
}
