/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Period } from "./Period";
import { CodeableConcept } from "./CodeableConcept";
import { dateTime } from "./dateTime";
import { DomainResource } from "./DomainResource";
import { Money } from "./Money";
import { date } from "./date";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** This resource provides the details including amount of a payment and allocates the payment items being paid. */
export interface PaymentReconciliation extends DomainResource {
    resourceType: 'PaymentReconciliation';
    _created?: Element;
    /** Responsible practitioner */
    requestor?: Reference<'PractitionerRole' | 'Organization' | 'Practitioner'>;
    /** Reference to requesting resource */
    request?: Reference<'Task'>;
    /** Total amount of Payment */
    paymentAmount: Money;
    /** Note concerning processing */
    processNote?: Array<PaymentReconciliationProcessNote>;
    _disposition?: Element;
    _status?: Element;
    /** Creation date */
    created: dateTime;
    /** queued | complete | error | partial */
    outcome?: `${PaymentReconciliationOutcome}`;
    _outcome?: Element;
    /** Disposition message */
    disposition?: string;
    /** Business identifier for the payment */
    paymentIdentifier?: Identifier;
    /** active | cancelled | draft | entered-in-error */
    status: `${PaymentReconciliationStatus}`;
    /** When payment issued */
    paymentDate: date;
    /** Business Identifier for a payment reconciliation */
    identifier?: Array<Identifier>;
    _paymentDate?: Element;
    /** Period covered */
    period?: Period;
    /** Party generating payment */
    paymentIssuer?: Reference<'Organization'>;
    /** Printed form identifier */
    formCode?: CodeableConcept;
    /** Settlement particulars */
    detail?: Array<PaymentReconciliationDetail>;
}
/** display | print | printoper */
export declare enum PaymentReconciliationProcessnoteType {
    Display = "display",
    Print = "print",
    Printoper = "printoper"
}
/** Note concerning processing */
export interface PaymentReconciliationProcessNote extends BackboneElement {
    /** display | print | printoper */
    type?: `${PaymentReconciliationProcessnoteType}`;
    _type?: Element;
    /** Note explanatory text */
    text?: string;
    _text?: Element;
}
/** queued | complete | error | partial */
export declare enum PaymentReconciliationOutcome {
    Complete = "complete",
    Error = "error",
    Partial = "partial",
    Queued = "queued"
}
/** active | cancelled | draft | entered-in-error */
export declare enum PaymentReconciliationStatus {
    Active = "active",
    Cancelled = "cancelled",
    Draft = "draft",
    EnteredInError = "entered-in-error"
}
/** Settlement particulars */
export interface PaymentReconciliationDetail extends BackboneElement {
    /** Response committing to a payment */
    response?: Reference;
    /** Amount allocated to this payable */
    amount?: Money;
    /** Date of commitment to pay */
    date?: date;
    /** Request giving rise to the payment */
    request?: Reference;
    _date?: Element;
    /** Category of payment */
    type: CodeableConcept;
    /** Contact for the response */
    responsible?: Reference<'PractitionerRole'>;
    /** Recipient of the payment */
    payee?: Reference<'PractitionerRole' | 'Organization' | 'Practitioner'>;
    /** Business identifier of the prior payment detail */
    predecessor?: Identifier;
    /** Business identifier of the payment detail */
    identifier?: Identifier;
    /** Submitter of the request */
    submitter?: Reference<'PractitionerRole' | 'Organization' | 'Practitioner'>;
}
