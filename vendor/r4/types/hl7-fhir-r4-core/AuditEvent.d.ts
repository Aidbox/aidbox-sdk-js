/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Period } from "./Period";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { DomainResource } from "./DomainResource";
import { base64Binary } from "./base64Binary";
import { instant } from "./instant";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { BackboneElement } from "./BackboneElement";
/** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
export interface AuditEvent extends DomainResource {
    resourceType: 'AuditEvent';
    /** Description of the event outcome */
    outcomeDesc?: string;
    _action?: Element;
    /** Type/identifier of event */
    type: Coding;
    /** Whether the event succeeded or failed */
    outcome?: `${AuditEventOutcome}`;
    /** Audit Event Reporter */
    source: AuditEventSource;
    /** Time when the event was recorded */
    recorded: instant;
    /** Actor involved in the event */
    agent: Array<AuditEventAgent>;
    _outcome?: Element;
    /** The purposeOfUse of the event */
    purposeOfEvent?: Array<CodeableConcept>;
    /** Type of action performed during the event */
    action?: `${AuditEventAction}`;
    _outcomeDesc?: Element;
    /** When the activity occurred */
    period?: Period;
    _recorded?: Element;
    /** Data or objects used */
    entity?: Array<AuditEventEntity>;
    /** More specific type/id for the event */
    subtype?: Array<Coding>;
}
/** Whether the event succeeded or failed */
export declare enum AuditEventOutcome {
    Num0 = "0",
    Num12 = "12",
    Num4 = "4",
    Num8 = "8"
}
/** Audit Event Reporter */
export interface AuditEventSource extends BackboneElement {
    /** Logical source location within the enterprise */
    site?: string;
    _site?: Element;
    /** The identity of source detecting the event */
    observer: Reference<'Patient' | 'PractitionerRole' | 'Organization' | 'Device' | 'Practitioner' | 'RelatedPerson'>;
    /** The type of source where event originated */
    type?: Array<Coding>;
}
/** The type of network access point */
export declare enum AuditEventAgentNetworkType {
    Num1 = "1",
    Num2 = "2",
    Num3 = "3",
    Num4 = "4",
    Num5 = "5"
}
/** Logical network location for application activity */
export interface AuditEventNetwork extends BackboneElement {
    /** Identifier for the network access point of the user device */
    address?: string;
    _address?: Element;
    /** The type of network access point */
    type?: `${AuditEventAgentNetworkType}`;
    _type?: Element;
}
/** Actor involved in the event */
export interface AuditEventAgent extends BackboneElement {
    /** Agent role in the event */
    role?: Array<CodeableConcept>;
    /** Whether user is initiator */
    requestor: boolean;
    /** Identifier of who */
    who?: Reference<'Patient' | 'PractitionerRole' | 'Organization' | 'Device' | 'Practitioner' | 'RelatedPerson'>;
    /** Alternative User identity */
    altId?: string;
    /** Human friendly name for the agent */
    name?: string;
    /** How agent participated */
    type?: CodeableConcept;
    _altId?: Element;
    /** Policy that authorized event */
    policy?: Array<uri>;
    /** Reason given for this user */
    purposeOfUse?: Array<CodeableConcept>;
    _policy?: Array<Element>;
    _name?: Element;
    /** Logical network location for application activity */
    network?: AuditEventNetwork;
    /** Where */
    location?: Reference<'Location'>;
    /** Type of media */
    media?: Coding;
    _requestor?: Element;
}
/** Type of action performed during the event */
export declare enum AuditEventAction {
    C = "C",
    D = "D",
    E = "E",
    R = "R",
    U = "U"
}
/** Additional Information about the entity */
export interface AuditEventDetail extends BackboneElement {
    /** Name of the property */
    type: string;
    _type?: Element;
    valueString: string;
    _valueString: Element;
    valueBase64Binary: base64Binary;
    _valueBase64Binary: Element;
}
/** Data or objects used */
export interface AuditEventEntity extends BackboneElement {
    /** What role the entity played */
    role?: Coding;
    /** Descriptive text */
    description?: string;
    _query?: Element;
    /** Descriptor for entity */
    name?: string;
    /** Type of entity involved */
    type?: Coding;
    /** Life-cycle stage for the entity */
    lifecycle?: Coding;
    _description?: Element;
    _name?: Element;
    /** Query parameters */
    query?: base64Binary;
    /** Security labels on the entity */
    securityLabel?: Array<Coding>;
    /** Specific instance of resource */
    what?: Reference;
    /** Additional Information about the entity */
    detail?: Array<AuditEventDetail>;
}
