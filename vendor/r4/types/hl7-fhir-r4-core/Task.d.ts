/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Address } from "./Address";
import { UsageContext } from "./UsageContext";
import { Annotation } from "./Annotation";
import { Age } from "./Age";
import { Attachment } from "./Attachment";
import { positiveInt } from "./positiveInt";
import { unsignedInt } from "./unsignedInt";
import { Period } from "./Period";
import { url } from "./url";
import { ContactDetail } from "./ContactDetail";
import { DataRequirement } from "./DataRequirement";
import { CodeableConcept } from "./CodeableConcept";
import { TriggerDefinition } from "./TriggerDefinition";
import { uri } from "./uri";
import { Count } from "./Count";
import { Expression } from "./Expression";
import { Coding } from "./Coding";
import { id } from "./id";
import { dateTime } from "./dateTime";
import { Dosage } from "./Dosage";
import { Range } from "./Range";
import { oid } from "./oid";
import { ContactPoint } from "./ContactPoint";
import { uuid } from "./uuid";
import { Signature } from "./Signature";
import { RelatedArtifact } from "./RelatedArtifact";
import { Timing } from "./Timing";
import { Meta } from "./Meta";
import { Quantity } from "./Quantity";
import { Distance } from "./Distance";
import { canonical } from "./canonical";
import { HumanName } from "./HumanName";
import { Duration } from "./Duration";
import { time } from "./time";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { Money } from "./Money";
import { SampledData } from "./SampledData";
import { date } from "./date";
import { Ratio } from "./Ratio";
import { markdown } from "./markdown";
import { ParameterDefinition } from "./ParameterDefinition";
import { base64Binary } from "./base64Binary";
import { instant } from "./instant";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
import { decimal } from "./decimal";
import { Contributor } from "./Contributor";
/** A task to be performed. */
export interface Task extends DomainResource {
    /** Constraints on fulfillment tasks */
    restriction?: TaskRestriction;
    /** Human-readable explanation of task */
    description?: string;
    /** Requested performer */
    performerType?: Array<CodeableConcept>;
    /** Start and end time of execution */
    executionPeriod?: Period;
    /** Associated insurance coverage */
    insurance?: Array<Reference>;
    /** Formal definition of task */
    instantiatesCanonical?: canonical;
    /** Formal definition of task */
    instantiatesUri?: uri;
    /** Key events in history of the Task */
    relevantHistory?: Array<Reference>;
    _authoredOn?: Element;
    /** Healthcare event during which this task originated */
    encounter?: Reference<"Encounter">;
    _priority?: Element;
    _status?: Element;
    /** Why task is needed */
    reasonCode?: CodeableConcept;
    /** Reason for current status */
    statusReason?: CodeableConcept;
    /** Task Creation Date */
    authoredOn?: dateTime;
    /** Information produced as part of task */
    output?: Array<TaskOutput>;
    /** E.g. "Specimen collected", "IV prepped" */
    businessStatus?: CodeableConcept;
    _description?: Element;
    /** Comments made about the task */
    note?: Array<Annotation>;
    _intent?: Element;
    /** Beneficiary of the Task */
    for?: Reference;
    /** Who is asking for task to be done */
    requester?: Reference<"Patient" | "PractitionerRole" | "Organization" | "Device" | "Practitioner" | "RelatedPerson">;
    /** Task Last Modified Date */
    lastModified?: dateTime;
    /** routine | urgent | asap | stat */
    priority?: code;
    /** draft | requested | received | accepted | + */
    status: code;
    /** Requisition or grouper id */
    groupIdentifier?: Identifier;
    /** Task Type */
    code?: CodeableConcept;
    /** Task Instance Identifier */
    identifier?: Array<Identifier>;
    /** unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option */
    intent: code;
    /** What task is acting on */
    focus?: Reference;
    /** Information used to perform task */
    input?: Array<TaskInput>;
    /** Request fulfilled by this task */
    basedOn?: Array<Reference>;
    /** Composite task */
    partOf?: Array<Reference>;
    _lastModified?: Element;
    /** Where task occurs */
    location?: Reference<"Location">;
    _instantiatesCanonical?: Element;
    /** Responsible individual */
    owner?: Reference<"CareTeam" | "Patient" | "PractitionerRole" | "HealthcareService" | "Organization" | "Device" | "Practitioner" | "RelatedPerson">;
    /** Why task is needed */
    reasonReference?: Reference;
    _instantiatesUri?: Element;
}
/** Constraints on fulfillment tasks */
export interface TaskRestriction extends BackboneElement {
    /** How many times to repeat */
    repetitions?: positiveInt;
    _repetitions?: Element;
    /** When fulfillment sought */
    period?: Period;
    /** For whom is fulfillment sought? */
    recipient?: Array<Reference>;
}
/** Information produced as part of task */
export interface TaskOutput extends BackboneElement {
    valueBase64Binary: base64Binary;
    _valueUri: Element;
    valueAge: Age;
    valueParameterDefinition: ParameterDefinition;
    valueTiming: Timing;
    valueCode: code;
    _valueBoolean: Element;
    valueReference: Reference;
    _valueBase64Binary: Element;
    valueContributor: Contributor;
    valueContactDetail: ContactDetail;
    _valueId: Element;
    _valueUnsignedInt: Element;
    _valueUrl: Element;
    valueUri: uri;
    valueUsageContext: UsageContext;
    valueTime: time;
    valueDecimal: decimal;
    _valueDecimal: Element;
    valueCanonical: canonical;
    valueMarkdown: markdown;
    valueIdentifier: Identifier;
    _valueString: Element;
    valueTriggerDefinition: TriggerDefinition;
    valueQuantity: Quantity;
    valueCount: Count;
    valueString: string;
    _valueUuid: Element;
    valueRatio: Ratio;
    valueBoolean: boolean;
    valueInstant: instant;
    valueDateTime: dateTime;
    valueDate: date;
    /** Label for output */
    type: CodeableConcept;
    valueDuration: Duration;
    valueDataRequirement: DataRequirement;
    valueMeta: Meta;
    _valueCanonical: Element;
    valueMoney: Money;
    valueCoding: Coding;
    _valuePositiveInt: Element;
    valueExpression: Expression;
    _valueDateTime: Element;
    valueSampledData: SampledData;
    _valueTime: Element;
    valueDosage: Dosage;
    valueContactPoint: ContactPoint;
    valueCodeableConcept: CodeableConcept;
    _valueInstant: Element;
    _valueDate: Element;
    valueAnnotation: Annotation;
    valuePeriod: Period;
    _valueMarkdown: Element;
    _valueOid: Element;
    valueDistance: Distance;
    valueRange: Range;
    valueSignature: Signature;
    valueUuid: uuid;
    valueInteger: integer;
    _valueCode: Element;
    valueHumanName: HumanName;
    valueUnsignedInt: unsignedInt;
    valueAttachment: Attachment;
    valueOid: oid;
    valueAddress: Address;
    valueRelatedArtifact: RelatedArtifact;
    valuePositiveInt: positiveInt;
    valueId: id;
    valueUrl: url;
    _valueInteger: Element;
}
/** Information used to perform task */
export interface TaskInput extends BackboneElement {
    valueBase64Binary: base64Binary;
    _valueUri: Element;
    valueAge: Age;
    valueParameterDefinition: ParameterDefinition;
    valueTiming: Timing;
    valueCode: code;
    _valueBoolean: Element;
    valueReference: Reference;
    _valueBase64Binary: Element;
    valueContributor: Contributor;
    valueContactDetail: ContactDetail;
    _valueId: Element;
    _valueUnsignedInt: Element;
    _valueUrl: Element;
    valueUri: uri;
    valueUsageContext: UsageContext;
    valueTime: time;
    valueDecimal: decimal;
    _valueDecimal: Element;
    valueCanonical: canonical;
    valueMarkdown: markdown;
    valueIdentifier: Identifier;
    _valueString: Element;
    valueTriggerDefinition: TriggerDefinition;
    valueQuantity: Quantity;
    valueCount: Count;
    valueString: string;
    _valueUuid: Element;
    valueRatio: Ratio;
    valueBoolean: boolean;
    valueInstant: instant;
    valueDateTime: dateTime;
    valueDate: date;
    /** Label for the input */
    type: CodeableConcept;
    valueDuration: Duration;
    valueDataRequirement: DataRequirement;
    valueMeta: Meta;
    _valueCanonical: Element;
    valueMoney: Money;
    valueCoding: Coding;
    _valuePositiveInt: Element;
    valueExpression: Expression;
    _valueDateTime: Element;
    valueSampledData: SampledData;
    _valueTime: Element;
    valueDosage: Dosage;
    valueContactPoint: ContactPoint;
    valueCodeableConcept: CodeableConcept;
    _valueInstant: Element;
    _valueDate: Element;
    valueAnnotation: Annotation;
    valuePeriod: Period;
    _valueMarkdown: Element;
    _valueOid: Element;
    valueDistance: Distance;
    valueRange: Range;
    valueSignature: Signature;
    valueUuid: uuid;
    valueInteger: integer;
    _valueCode: Element;
    valueHumanName: HumanName;
    valueUnsignedInt: unsignedInt;
    valueAttachment: Attachment;
    valueOid: oid;
    valueAddress: Address;
    valueRelatedArtifact: RelatedArtifact;
    valuePositiveInt: positiveInt;
    valueId: id;
    valueUrl: url;
    _valueInteger: Element;
}
