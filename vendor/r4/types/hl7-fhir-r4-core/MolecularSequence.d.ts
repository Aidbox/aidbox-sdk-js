/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Quantity } from "./Quantity";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
import { decimal } from "./decimal";
/** Raw data describing a biological sequence. */
export interface MolecularSequence extends DomainResource {
    /** Who and/or what this is about */
    patient?: Reference<"Patient">;
    /** Structural variant */
    structureVariant?: Array<MolecularSequenceStructureVariant>;
    /** External repository which contains detailed report related with observedSeq in this resource */
    repository?: Array<MolecularSequenceRepository>;
    /** Variant in sequence */
    variant?: Array<MolecularSequenceVariant>;
    /** Specimen used for sequencing */
    specimen?: Reference<"Specimen">;
    _type?: Element;
    /** aa | dna | rna */
    type?: code;
    _coordinateSystem?: Element;
    _observedSeq?: Element;
    _readCoverage?: Element;
    /** Pointer to next atomic sequence */
    pointer?: Array<Reference>;
    /** Sequence that was observed */
    observedSeq?: string;
    /** Unique ID for this particular sequence. This is a FHIR-defined id */
    identifier?: Array<Identifier>;
    /** An set of value as quality of sequence */
    quality?: Array<MolecularSequenceQuality>;
    /** The method for sequencing */
    device?: Reference<"Device">;
    /** The number of copies of the sequence of interest.  (RNASeq) */
    quantity?: Quantity;
    /** Base number of coordinate system (0 for 0-based numbering or coordinates, inclusive start, exclusive end, 1 for 1-based numbering, inclusive start, inclusive end) */
    coordinateSystem: integer;
    /** A sequence used as reference */
    referenceSeq?: MolecularSequenceReferenceSeq;
    /** Who should be responsible for test result */
    performer?: Reference<"Organization">;
    /** Average number of reads representing a given nucleotide in the reconstructed sequence */
    readCoverage?: integer;
}
/** Structural variant outer */
export interface MolecularSequenceOuter extends BackboneElement {
    /** Structural variant outer start */
    start?: integer;
    _start?: Element;
    /** Structural variant outer end */
    end?: integer;
    _end?: Element;
}
/** Structural variant inner */
export interface MolecularSequenceInner extends BackboneElement {
    /** Structural variant inner start */
    start?: integer;
    _start?: Element;
    /** Structural variant inner end */
    end?: integer;
    _end?: Element;
}
/** Structural variant */
export interface MolecularSequenceStructureVariant extends BackboneElement {
    /** Structural variant change type */
    variantType?: CodeableConcept;
    /** Does the structural variant have base pair resolution breakpoints? */
    exact?: boolean;
    _exact?: Element;
    /** Structural variant length */
    length?: integer;
    _length?: Element;
    /** Structural variant outer */
    outer?: MolecularSequenceOuter;
    /** Structural variant inner */
    inner?: MolecularSequenceInner;
}
/** External repository which contains detailed report related with observedSeq in this resource */
export interface MolecularSequenceRepository extends BackboneElement {
    /** Id of the read */
    readsetId?: string;
    /** Repository's name */
    name?: string;
    _type?: Element;
    /** directlink | openapi | login | oauth | other */
    type: code;
    _datasetId?: Element;
    /** Id of the dataset that used to call for dataset in repository */
    datasetId?: string;
    _variantsetId?: Element;
    /** Id of the variantset that used to call for variantset in repository */
    variantsetId?: string;
    _name?: Element;
    /** URI of the repository */
    url?: uri;
    _readsetId?: Element;
    _url?: Element;
}
/** Variant in sequence */
export interface MolecularSequenceVariant extends BackboneElement {
    /** Pointer to observed variant information */
    variantPointer?: Reference<"Observation">;
    /** Allele in the reference sequence */
    referenceAllele?: string;
    _end?: Element;
    /** Start position of the variant on the  reference sequence */
    start?: integer;
    _observedAllele?: Element;
    _referenceAllele?: Element;
    /** Allele that was observed */
    observedAllele?: string;
    _cigar?: Element;
    /** End position of the variant on the reference sequence */
    end?: integer;
    _start?: Element;
    /** Extended CIGAR string for aligning the sequence with reference bases */
    cigar?: string;
}
/** Receiver Operator Characteristic (ROC) Curve */
export interface MolecularSequenceRoc extends BackboneElement {
    _numFN?: Array<Element>;
    _numTP?: Array<Element>;
    /** Sensitivity of the GQ score */
    sensitivity?: Array<decimal>;
    /** Precision of the GQ score */
    precision?: Array<decimal>;
    _fMeasure?: Array<Element>;
    _score?: Array<Element>;
    /** Roc score false negative numbers */
    numFN?: Array<integer>;
    _sensitivity?: Array<Element>;
    /** Roc score false positive numbers */
    numFP?: Array<integer>;
    /** Genotype quality score */
    score?: Array<integer>;
    _precision?: Array<Element>;
    _numFP?: Array<Element>;
    /** FScore of the GQ score */
    fMeasure?: Array<decimal>;
    /** Roc score true positive numbers */
    numTP?: Array<integer>;
}
/** An set of value as quality of sequence */
export interface MolecularSequenceQuality extends BackboneElement {
    /** True positives from the perspective of the truth data */
    truthTP?: decimal;
    /** F-score */
    fScore?: decimal;
    _fScore?: Element;
    /** False negatives */
    truthFN?: decimal;
    /** False positives */
    queryFP?: decimal;
    /** Method to get quality */
    method?: CodeableConcept;
    _end?: Element;
    /** Precision of comparison */
    precision?: decimal;
    _type?: Element;
    /** Start position of the sequence */
    start?: integer;
    /** True positives from the perspective of the query data */
    queryTP?: decimal;
    /** indel | snp | unknown */
    type: code;
    _truthFN?: Element;
    _gtFP?: Element;
    /** Recall of comparison */
    recall?: decimal;
    _truthTP?: Element;
    _recall?: Element;
    /** Receiver Operator Characteristic (ROC) Curve */
    roc?: MolecularSequenceRoc;
    /** Quality score for the comparison */
    score?: Quantity;
    _precision?: Element;
    _queryTP?: Element;
    /** End position of the sequence */
    end?: integer;
    _queryFP?: Element;
    _start?: Element;
    /** Standard sequence for comparison */
    standardSequence?: CodeableConcept;
    /** False positives where the non-REF alleles in the Truth and Query Call Sets match */
    gtFP?: decimal;
}
/** A sequence used as reference */
export interface MolecularSequenceReferenceSeq extends BackboneElement {
    /** Chromosome containing genetic finding */
    chromosome?: CodeableConcept;
    /** Reference identifier */
    referenceSeqId?: CodeableConcept;
    _referenceSeqString?: Element;
    /** End position of the window on the reference sequence */
    windowEnd?: integer;
    _genomeBuild?: Element;
    /** watson | crick */
    strand?: code;
    /** The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37' */
    genomeBuild?: string;
    /** sense | antisense */
    orientation?: code;
    _strand?: Element;
    /** A pointer to another MolecularSequence entity as reference sequence */
    referenceSeqPointer?: Reference<"MolecularSequence">;
    _windowStart?: Element;
    _orientation?: Element;
    /** A string to represent reference sequence */
    referenceSeqString?: string;
    _windowEnd?: Element;
    /** Start position of the window on the  reference sequence */
    windowStart?: integer;
}
