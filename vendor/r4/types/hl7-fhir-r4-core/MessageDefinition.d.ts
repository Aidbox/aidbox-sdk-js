/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { unsignedInt } from "./unsignedInt";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { DomainResource } from "./DomainResource";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
export interface MessageDefinition extends DomainResource {
    resourceType: 'MessageDefinition';
    _base?: Element;
    /** Natural language description of the message definition */
    description?: markdown;
    /** consequence | currency | notification */
    category?: `${MessageDefinitionCategory}`;
    /** Date last changed */
    date: dateTime;
    _graph?: Array<Element>;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** Protocol/workflow this is part of */
    parent?: Array<canonical>;
    /** Intended jurisdiction for message definition (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Why this message definition is defined */
    purpose?: markdown;
    _date?: Element;
    _replaces?: Array<Element>;
    /** Name for this message definition (computer friendly) */
    name?: string;
    _status?: Element;
    _parent?: Array<Element>;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Name for this message definition (human friendly) */
    title?: string;
    _description?: Element;
    _purpose?: Element;
    /** draft | active | retired | unknown */
    status: `${MessageDefinitionStatus}`;
    /** Responses to this message */
    allowedResponse?: Array<MessageDefinitionAllowedResponse>;
    /** Canonical reference to a GraphDefinition */
    graph?: Array<canonical>;
    _name?: Element;
    _responseRequired?: Element;
    /** Business Identifier for a given MessageDefinition */
    url?: uri;
    /** Primary key for the message definition on a given server */
    identifier?: Array<Identifier>;
    /** Resource(s) that are the subject of the event */
    focus?: Array<MessageDefinitionFocus>;
    _copyright?: Element;
    _title?: Element;
    /** Takes the place of */
    replaces?: Array<canonical>;
    /** always | on-error | never | on-success */
    responseRequired?: `${MessageDefinitionResponseRequired}`;
    _category?: Element;
    /** Definition this one is based on */
    base?: canonical;
    /** Business version of the message definition */
    version?: string;
    _version?: Element;
    _eventUri: Element;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    eventUri: uri;
    _url?: Element;
    eventCoding: Coding;
}
/** consequence | currency | notification */
export declare enum MessageDefinitionCategory {
    Consequence = "consequence",
    Currency = "currency",
    Notification = "notification"
}
/** draft | active | retired | unknown */
export declare enum MessageDefinitionStatus {
    Active = "active",
    Draft = "draft",
    Retired = "retired",
    Unknown = "unknown"
}
/** Responses to this message */
export interface MessageDefinitionAllowedResponse extends BackboneElement {
    /** Reference to allowed message definition response */
    message: canonical;
    _message?: Element;
    /** When should this response be used */
    situation?: markdown;
    _situation?: Element;
}
/** Type of resource */
export declare enum MessageDefinitionCode {
    ImmunizationEvaluation = "ImmunizationEvaluation",
    Appointment = "Appointment",
    StructureMap = "StructureMap",
    CareTeam = "CareTeam",
    Linkage = "Linkage",
    Communication = "Communication",
    MedicationDispense = "MedicationDispense",
    ImagingStudy = "ImagingStudy",
    ChargeItem = "ChargeItem",
    AdverseEvent = "AdverseEvent",
    Media = "Media",
    SubstancePolymer = "SubstancePolymer",
    QuestionnaireResponse = "QuestionnaireResponse",
    Coverage = "Coverage",
    Procedure = "Procedure",
    AuditEvent = "AuditEvent",
    PaymentReconciliation = "PaymentReconciliation",
    MedicinalProductManufactured = "MedicinalProductManufactured",
    CompartmentDefinition = "CompartmentDefinition",
    Organization = "Organization",
    ExplanationOfBenefit = "ExplanationOfBenefit",
    Composition = "Composition",
    CoverageEligibilityResponse = "CoverageEligibilityResponse",
    DocumentReference = "DocumentReference",
    EventDefinition = "EventDefinition",
    SubstanceProtein = "SubstanceProtein",
    TerminologyCapabilities = "TerminologyCapabilities",
    Encounter = "Encounter",
    ImplementationGuide = "ImplementationGuide",
    EvidenceVariable = "EvidenceVariable",
    ObservationDefinition = "ObservationDefinition",
    DiagnosticReport = "DiagnosticReport",
    ExampleScenario = "ExampleScenario",
    ResearchDefinition = "ResearchDefinition",
    Parameters = "Parameters",
    SearchParameter = "SearchParameter",
    MedicinalProductInteraction = "MedicinalProductInteraction",
    CodeSystem = "CodeSystem",
    MessageDefinition = "MessageDefinition",
    NutritionOrder = "NutritionOrder",
    VerificationResult = "VerificationResult",
    MedicationAdministration = "MedicationAdministration",
    CatalogEntry = "CatalogEntry",
    Flag = "Flag",
    DeviceUseStatement = "DeviceUseStatement",
    Contract = "Contract",
    Invoice = "Invoice",
    PaymentNotice = "PaymentNotice",
    Location = "Location",
    Claim = "Claim",
    Specimen = "Specimen",
    MedicationStatement = "MedicationStatement",
    EnrollmentResponse = "EnrollmentResponse",
    Evidence = "Evidence",
    Bundle = "Bundle",
    ResearchElementDefinition = "ResearchElementDefinition",
    BodyStructure = "BodyStructure",
    MedicinalProduct = "MedicinalProduct",
    ResearchStudy = "ResearchStudy",
    AppointmentResponse = "AppointmentResponse",
    MedicinalProductIndication = "MedicinalProductIndication",
    Measure = "Measure",
    Person = "Person",
    InsurancePlan = "InsurancePlan",
    Patient = "Patient",
    EffectEvidenceSynthesis = "EffectEvidenceSynthesis",
    ResearchSubject = "ResearchSubject",
    Medication = "Medication",
    ConceptMap = "ConceptMap",
    CoverageEligibilityRequest = "CoverageEligibilityRequest",
    SubstanceSourceMaterial = "SubstanceSourceMaterial",
    VisionPrescription = "VisionPrescription",
    MolecularSequence = "MolecularSequence",
    MedicinalProductUndesirableEffect = "MedicinalProductUndesirableEffect",
    OperationOutcome = "OperationOutcome",
    MessageHeader = "MessageHeader",
    AllergyIntolerance = "AllergyIntolerance",
    SubstanceReferenceInformation = "SubstanceReferenceInformation",
    SupplyDelivery = "SupplyDelivery",
    EpisodeOfCare = "EpisodeOfCare",
    PractitionerRole = "PractitionerRole",
    Library = "Library",
    Practitioner = "Practitioner",
    MedicationRequest = "MedicationRequest",
    ImmunizationRecommendation = "ImmunizationRecommendation",
    Immunization = "Immunization",
    GraphDefinition = "GraphDefinition",
    Account = "Account",
    MedicinalProductIngredient = "MedicinalProductIngredient",
    MeasureReport = "MeasureReport",
    DeviceMetric = "DeviceMetric",
    Goal = "Goal",
    MedicationKnowledge = "MedicationKnowledge",
    ClaimResponse = "ClaimResponse",
    DeviceDefinition = "DeviceDefinition",
    Slot = "Slot",
    ValueSet = "ValueSet",
    MedicinalProductAuthorization = "MedicinalProductAuthorization",
    StructureDefinition = "StructureDefinition",
    MedicinalProductContraindication = "MedicinalProductContraindication",
    DeviceRequest = "DeviceRequest",
    List = "List",
    Questionnaire = "Questionnaire",
    DomainResource = "DomainResource",
    Endpoint = "Endpoint",
    NamingSystem = "NamingSystem",
    MedicinalProductPackaged = "MedicinalProductPackaged",
    Basic = "Basic",
    Binary = "Binary",
    PlanDefinition = "PlanDefinition",
    Subscription = "Subscription",
    RelatedPerson = "RelatedPerson",
    SubstanceSpecification = "SubstanceSpecification",
    SubstanceNucleicAcid = "SubstanceNucleicAcid",
    GuidanceResponse = "GuidanceResponse",
    ClinicalImpression = "ClinicalImpression",
    OrganizationAffiliation = "OrganizationAffiliation",
    Resource = "Resource",
    Condition = "Condition",
    CapabilityStatement = "CapabilityStatement",
    HealthcareService = "HealthcareService",
    SpecimenDefinition = "SpecimenDefinition",
    RiskAssessment = "RiskAssessment",
    OperationDefinition = "OperationDefinition",
    ActivityDefinition = "ActivityDefinition",
    Schedule = "Schedule",
    BiologicallyDerivedProduct = "BiologicallyDerivedProduct",
    Group = "Group",
    MedicinalProductPharmaceutical = "MedicinalProductPharmaceutical",
    FamilyMemberHistory = "FamilyMemberHistory",
    ServiceRequest = "ServiceRequest",
    DetectedIssue = "DetectedIssue",
    Device = "Device",
    RequestGroup = "RequestGroup",
    TestScript = "TestScript",
    RiskEvidenceSynthesis = "RiskEvidenceSynthesis",
    SupplyRequest = "SupplyRequest",
    Task = "Task",
    CommunicationRequest = "CommunicationRequest",
    EnrollmentRequest = "EnrollmentRequest",
    ChargeItemDefinition = "ChargeItemDefinition",
    Substance = "Substance",
    Provenance = "Provenance",
    Consent = "Consent",
    CarePlan = "CarePlan",
    TestReport = "TestReport",
    Observation = "Observation",
    DocumentManifest = "DocumentManifest"
}
/** Resource(s) that are the subject of the event */
export interface MessageDefinitionFocus extends BackboneElement {
    /** Type of resource */
    code: `${MessageDefinitionCode}`;
    _code?: Element;
    /** Profile that must be adhered to by focus */
    profile?: canonical;
    _profile?: Element;
    /** Minimum number of focuses of this type */
    min: unsignedInt;
    _min?: Element;
    /** Maximum number of focuses of this type */
    max?: string;
    _max?: Element;
}
/** always | on-error | never | on-success */
export declare enum MessageDefinitionResponseRequired {
    Always = "always",
    Never = "never",
    OnError = "on-error",
    OnSuccess = "on-success"
}
