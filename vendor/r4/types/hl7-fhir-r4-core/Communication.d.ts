/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Annotation } from "./Annotation";
import { Attachment } from "./Attachment";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { DomainResource } from "./DomainResource";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition. */
export interface Communication extends DomainResource {
    resourceType: 'Communication';
    /** Message category */
    category?: Array<CodeableConcept>;
    /** When received */
    received?: dateTime;
    /** Instantiates FHIR protocol or definition */
    instantiatesCanonical?: Array<canonical>;
    /** Message payload */
    payload?: Array<CommunicationPayload>;
    /** Instantiates external protocol or definition */
    instantiatesUri?: Array<uri>;
    _received?: Element;
    /** Encounter created as part of */
    encounter?: Reference<'Encounter'>;
    /** A channel of communication */
    medium?: Array<CodeableConcept>;
    _priority?: Element;
    _status?: Element;
    /** Message recipient */
    recipient?: Array<Reference>;
    /** Indication for message */
    reasonCode?: Array<CodeableConcept>;
    /** Reason for current status */
    statusReason?: CodeableConcept;
    /** Description of the purpose/content */
    topic?: CodeableConcept;
    /** When sent */
    sent?: dateTime;
    /** Comments made about the communication */
    note?: Array<Annotation>;
    /** routine | urgent | asap | stat */
    priority?: `${CommunicationPriority}`;
    /** preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown */
    status: `${CommunicationStatus}`;
    /** Message sender */
    sender?: Reference<'Patient' | 'PractitionerRole' | 'HealthcareService' | 'Organization' | 'Device' | 'Practitioner' | 'RelatedPerson'>;
    /** Unique identifier */
    identifier?: Array<Identifier>;
    /** Reply to */
    inResponseTo?: Array<Reference>;
    /** Request fulfilled by this communication */
    basedOn?: Array<Reference>;
    /** Part of this action */
    partOf?: Array<Reference>;
    _instantiatesCanonical?: Array<Element>;
    /** Focus of message */
    subject?: Reference<'Patient' | 'Group'>;
    /** Resources that pertain to this communication */
    about?: Array<Reference>;
    /** Why was communication done? */
    reasonReference?: Array<Reference>;
    _instantiatesUri?: Array<Element>;
    _sent?: Element;
}
/** Message payload */
export interface CommunicationPayload extends BackboneElement {
    contentString: string;
    _contentString: Element;
    contentAttachment: Attachment;
    contentReference: Reference;
}
/** routine | urgent | asap | stat */
export declare enum CommunicationPriority {
    Asap = "asap",
    Routine = "routine",
    Stat = "stat",
    Urgent = "urgent"
}
/** preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown */
export declare enum CommunicationStatus {
    Completed = "completed",
    EnteredInError = "entered-in-error",
    InProgress = "in-progress",
    NotDone = "not-done",
    OnHold = "on-hold",
    Preparation = "preparation",
    Stopped = "stopped",
    Unknown = "unknown"
}
