/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { id } from "./id";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { ElementDefinition } from "./ElementDefinition";
import { DomainResource } from "./DomainResource";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
export interface StructureDefinition extends DomainResource {
    resourceType: 'StructureDefinition';
    /** Natural language description of the structure definition */
    description?: markdown;
    _kind?: Element;
    /** Date last changed */
    date?: dateTime;
    /** specialization | constraint - How relates to base definition */
    derivation?: `${StructureDefinitionDerivation}`;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** FHIRPath invariants - when the extension can be used */
    contextInvariant?: Array<string>;
    /** FHIR Version this StructureDefinition targets */
    fhirVersion?: `${StructureDefinitionFhirversion}`;
    /** Intended jurisdiction for structure definition (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Why this structure definition is defined */
    purpose?: markdown;
    _date?: Element;
    /** Name for this structure definition (computer friendly) */
    name: string;
    /** External specification that the content is mapped to */
    mapping?: Array<StructureDefinitionMapping>;
    _type?: Element;
    _status?: Element;
    _fhirVersion?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Whether the structure is abstract */
    abstract: boolean;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    /** Type defined or constrained by this structure */
    type: uri;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Name for this structure definition (human friendly) */
    title?: string;
    _description?: Element;
    _purpose?: Element;
    /** Snapshot view of the structure */
    snapshot?: StructureDefinitionSnapshot;
    _abstract?: Element;
    /** Assist with indexing and finding */
    keyword?: Array<Coding>;
    /** draft | active | retired | unknown */
    status: `${StructureDefinitionStatus}`;
    /** primitive-type | complex-type | resource | logical */
    kind: `${StructureDefinitionKind}`;
    _name?: Element;
    /** Canonical identifier for this structure definition, represented as a URI (globally unique) */
    url: uri;
    /** Additional identifier for the structure definition */
    identifier?: Array<Identifier>;
    _derivation?: Element;
    /** If an extension, where it can be used in instances */
    context?: Array<StructureDefinitionContext>;
    _baseDefinition?: Element;
    _copyright?: Element;
    _title?: Element;
    /** Business version of the structure definition */
    version?: string;
    _version?: Element;
    /** Differential view of the structure */
    differential?: StructureDefinitionDifferential;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    _url?: Element;
    _contextInvariant?: Array<Element>;
    /** Definition that this type is constrained/specialized from */
    baseDefinition?: canonical;
}
/** specialization | constraint - How relates to base definition */
export declare enum StructureDefinitionDerivation {
    Constraint = "constraint",
    Specialization = "specialization"
}
/** Differential view of the structure */
export interface StructureDefinitionDifferential extends BackboneElement {
    /** Definition of elements in the resource (if no StructureDefinition) */
    element: Array<ElementDefinition>;
}
/** If an extension, where it can be used in instances */
export interface StructureDefinitionContext extends BackboneElement {
    /** fhirpath | element | extension */
    type: `${StructureDefinitionContextType}`;
    _type?: Element;
    /** Where the extension can be used in instances */
    expression: string;
    _expression?: Element;
}
/** primitive-type | complex-type | resource | logical */
export declare enum StructureDefinitionKind {
    ComplexType = "complex-type",
    Logical = "logical",
    PrimitiveType = "primitive-type",
    Resource = "resource"
}
/** fhirpath | element | extension */
export declare enum StructureDefinitionContextType {
    Element = "element",
    Extension = "extension",
    Fhirpath = "fhirpath"
}
/** FHIR Version this StructureDefinition targets */
export declare enum StructureDefinitionFhirversion {
    "Num1.8.0" = "1.8.0",
    "Num0.05" = "0.05",
    "Num0.01" = "0.01",
    "Num3.0.1" = "3.0.1",
    "Num1.0.0" = "1.0.0",
    "Num3.3.0" = "3.3.0",
    "Num0.0.82" = "0.0.82",
    "Num1.6.0" = "1.6.0",
    "Num1.4.0" = "1.4.0",
    "Num3.0.0" = "3.0.0",
    "Num0.0.80" = "0.0.80",
    "Num4.0.0" = "4.0.0",
    "Num0.11" = "0.11",
    "Num0.06" = "0.06",
    "Num1.0.2" = "1.0.2",
    "Num1.0.1" = "1.0.1",
    "Num0.4.0" = "0.4.0",
    "Num4.0.1" = "4.0.1",
    "Num3.5.0" = "3.5.0",
    "Num0.5.0" = "0.5.0",
    "Num1.1.0" = "1.1.0",
    "Num0.0.81" = "0.0.81"
}
/** Snapshot view of the structure */
export interface StructureDefinitionSnapshot extends BackboneElement {
    /** Definition of elements in the resource (if no StructureDefinition) */
    element: Array<ElementDefinition>;
}
/** draft | active | retired | unknown */
export declare enum StructureDefinitionStatus {
    Active = "active",
    Draft = "draft",
    Retired = "retired",
    Unknown = "unknown"
}
/** External specification that the content is mapped to */
export interface StructureDefinitionMapping extends BackboneElement {
    /** Internal id when this mapping is used */
    identity: id;
    _identity?: Element;
    /** Identifies what this mapping refers to */
    uri?: uri;
    _uri?: Element;
    /** Names what this mapping refers to */
    name?: string;
    _name?: Element;
    /** Versions, Issues, Scope limitations etc. */
    comment?: string;
    _comment?: Element;
}
