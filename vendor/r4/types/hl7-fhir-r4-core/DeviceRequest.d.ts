/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Annotation } from "./Annotation";
import { Period } from "./Period";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { dateTime } from "./dateTime";
import { Range } from "./Range";
import { Timing } from "./Timing";
import { Quantity } from "./Quantity";
import { canonical } from "./canonical";
import { DomainResource } from "./DomainResource";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. */
export interface DeviceRequest extends DomainResource {
    resourceType: 'DeviceRequest';
    /** Filler role */
    performerType?: CodeableConcept;
    /** Associated insurance coverage */
    insurance?: Array<Reference>;
    /** Instantiates FHIR protocol or definition */
    instantiatesCanonical?: Array<canonical>;
    /** Instantiates external protocol or definition */
    instantiatesUri?: Array<uri>;
    /** Request provenance */
    relevantHistory?: Array<Reference>;
    _authoredOn?: Element;
    /** Additional clinical information */
    supportingInfo?: Array<Reference>;
    /** Encounter motivating request */
    encounter?: Reference<'Encounter'>;
    /** What request replaces */
    priorRequest?: Array<Reference>;
    _priority?: Element;
    _status?: Element;
    /** Coded Reason for request */
    reasonCode?: Array<CodeableConcept>;
    /** When recorded */
    authoredOn?: dateTime;
    occurrenceTiming?: Timing;
    /** Notes or comments */
    note?: Array<Annotation>;
    codeReference: Reference<'Device'>;
    _intent?: Element;
    /** Who/what is requesting diagnostics */
    requester?: Reference<'PractitionerRole' | 'Organization' | 'Device' | 'Practitioner'>;
    /** routine | urgent | asap | stat */
    priority?: `${DeviceRequestPriority}`;
    occurrencePeriod?: Period;
    /** draft | active | on-hold | revoked | completed | entered-in-error | unknown */
    status?: `${DeviceRequestStatus}`;
    codeCodeableConcept: CodeableConcept;
    /** Identifier of composite request */
    groupIdentifier?: Identifier;
    /** External Request identifier */
    identifier?: Array<Identifier>;
    /** proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option */
    intent: `${DeviceRequestIntent}`;
    /** What request fulfills */
    basedOn?: Array<Reference>;
    occurrenceDateTime?: dateTime;
    _instantiatesCanonical?: Array<Element>;
    /** Focus of request */
    subject: Reference<'Patient' | 'Device' | 'Location' | 'Group'>;
    /** Device details */
    parameter?: Array<DeviceRequestParameter>;
    /** Requested Filler */
    performer?: Reference<'CareTeam' | 'Patient' | 'PractitionerRole' | 'HealthcareService' | 'Organization' | 'Device' | 'Practitioner' | 'RelatedPerson'>;
    /** Linked Reason for request */
    reasonReference?: Array<Reference>;
    _instantiatesUri?: Array<Element>;
    _occurrenceDateTime?: Element;
}
/** routine | urgent | asap | stat */
export declare enum DeviceRequestPriority {
    Asap = "asap",
    Routine = "routine",
    Stat = "stat",
    Urgent = "urgent"
}
/** draft | active | on-hold | revoked | completed | entered-in-error | unknown */
export declare enum DeviceRequestStatus {
    Active = "active",
    Completed = "completed",
    Draft = "draft",
    EnteredInError = "entered-in-error",
    OnHold = "on-hold",
    Revoked = "revoked",
    Unknown = "unknown"
}
/** proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option */
export declare enum DeviceRequestIntent {
    Order = "order",
    FillerOrder = "filler-order",
    Option = "option",
    Directive = "directive",
    Proposal = "proposal",
    ReflexOrder = "reflex-order",
    Plan = "plan",
    InstanceOrder = "instance-order",
    OriginalOrder = "original-order"
}
/** Device details */
export interface DeviceRequestParameter extends BackboneElement {
    /** Device detail */
    code?: CodeableConcept;
    valueCodeableConcept?: CodeableConcept;
    valueQuantity?: Quantity;
    valueRange?: Range;
    valueBoolean?: boolean;
    _valueBoolean?: Element;
}
