/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Address } from "./Address";
import { positiveInt } from "./positiveInt";
import { Period } from "./Period";
import { CodeableConcept } from "./CodeableConcept";
import { ContactPoint } from "./ContactPoint";
import { Quantity } from "./Quantity";
import { HumanName } from "./HumanName";
import { DomainResource } from "./DomainResource";
import { Money } from "./Money";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** Details of a Health Insurance product/plan provided by an organization. */
export interface InsurancePlan extends DomainResource {
    /** Where product applies */
    coverageArea?: Array<Reference>;
    /** Official name */
    name?: string;
    _status?: Element;
    /** Coverage details */
    coverage?: Array<InsurancePlanCoverage>;
    /** Kind of product */
    type?: Array<CodeableConcept>;
    /** Alternate names */
    alias?: Array<string>;
    /** draft | active | retired | unknown */
    status?: code;
    _name?: Element;
    /** Business Identifier for Product */
    identifier?: Array<Identifier>;
    /** Product administrator */
    administeredBy?: Reference<"Organization">;
    /** Plan issuer */
    ownedBy?: Reference<"Organization">;
    /** What networks are Included */
    network?: Array<Reference>;
    /** When the product is available */
    period?: Period;
    _alias?: Array<Element>;
    /** Plan details */
    plan?: Array<InsurancePlanPlan>;
    /** Technical endpoint */
    endpoint?: Array<Reference>;
    /** Contact for the product */
    contact?: Array<InsurancePlanContact>;
}
/** Benefit limits */
export interface InsurancePlanLimit extends BackboneElement {
    /** Maximum value allowed */
    value?: Quantity;
    /** Benefit limit details */
    code?: CodeableConcept;
}
/** List of benefits */
export interface InsurancePlanBenefit extends BackboneElement {
    /** Type of benefit */
    type: CodeableConcept;
    /** Referral requirements */
    requirement?: string;
    _requirement?: Element;
    /** Benefit limits */
    limit?: Array<InsurancePlanLimit>;
}
/** Coverage details */
export interface InsurancePlanCoverage extends BackboneElement {
    /** Type of coverage */
    type: CodeableConcept;
    /** What networks provide coverage */
    network?: Array<Reference>;
    /** List of benefits */
    benefit: Array<InsurancePlanBenefit>;
}
/** Overall costs */
export interface InsurancePlanGeneralCost extends BackboneElement {
    /** Type of cost */
    type?: CodeableConcept;
    /** Number of enrollees */
    groupSize?: positiveInt;
    _groupSize?: Element;
    /** Cost value */
    cost?: Money;
    /** Additional cost information */
    comment?: string;
    _comment?: Element;
}
/** List of the costs */
export interface InsurancePlanCost extends BackboneElement {
    /** Type of cost */
    type: CodeableConcept;
    /** in-network | out-of-network | other */
    applicability?: CodeableConcept;
    /** Additional information about the cost */
    qualifiers?: Array<CodeableConcept>;
    /** The actual cost value */
    value?: Quantity;
}
/** Specific costs */
export interface InsurancePlanSpecificCost extends BackboneElement {
    /** General category of benefit */
    category: CodeableConcept;
    /** Benefits list */
    benefit?: Array<InsurancePlanBenefit>;
}
/** Plan details */
export interface InsurancePlanPlan extends BackboneElement {
    /** Business Identifier for Product */
    identifier?: Array<Identifier>;
    /** Type of plan */
    type?: CodeableConcept;
    /** Where product applies */
    coverageArea?: Array<Reference>;
    /** What networks provide coverage */
    network?: Array<Reference>;
    /** Overall costs */
    generalCost?: Array<InsurancePlanGeneralCost>;
    /** Specific costs */
    specificCost?: Array<InsurancePlanSpecificCost>;
}
/** Contact for the product */
export interface InsurancePlanContact extends BackboneElement {
    /** The type of contact */
    purpose?: CodeableConcept;
    /** A name associated with the contact */
    name?: HumanName;
    /** Contact details (telephone, email, etc.)  for a contact */
    telecom?: Array<ContactPoint>;
    /** Visiting or postal addresses for the contact */
    address?: Address;
}
