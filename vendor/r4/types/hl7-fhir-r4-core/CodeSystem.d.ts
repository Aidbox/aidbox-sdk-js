/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { unsignedInt } from "./unsignedInt";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
import { decimal } from "./decimal";
/** The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. */
export interface CodeSystem extends DomainResource {
    resourceType: 'CodeSystem';
    _supplements?: Element;
    /** Natural language description of the code system */
    description?: markdown;
    _content?: Element;
    /** Date last changed */
    date?: dateTime;
    _versionNeeded?: Element;
    _count?: Element;
    /** If definitions are not stable */
    versionNeeded?: boolean;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    _hierarchyMeaning?: Element;
    /** Intended jurisdiction for code system (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Why this code system is defined */
    purpose?: markdown;
    /** not-present | example | fragment | complete | supplement */
    content: `${CodeSystemContent}`;
    _date?: Element;
    /** Additional information supplied about each concept */
    property?: Array<CodeSystemProperty>;
    /** Name for this code system (computer friendly) */
    name?: string;
    _status?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    _caseSensitive?: Element;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Name for this code system (human friendly) */
    title?: string;
    _description?: Element;
    _purpose?: Element;
    /** Filter that can be used in a value set */
    filter?: Array<CodeSystemFilter>;
    /** Canonical URL of Code System this adds designations and properties to */
    supplements?: canonical;
    /** If code system defines a compositional grammar */
    compositional?: boolean;
    /** draft | active | retired | unknown */
    status: `${CodeSystemStatus}`;
    /** grouped-by | is-a | part-of | classified-with */
    hierarchyMeaning?: `${CodeSystemHierarchymeaning}`;
    /** Canonical reference to the value set with entire code system */
    valueSet?: canonical;
    _name?: Element;
    /** Total concepts in the code system */
    count?: unsignedInt;
    /** Canonical identifier for this code system, represented as a URI (globally unique) (Coding.system) */
    url?: uri;
    /** Additional identifier for the code system (business identifier) */
    identifier?: Array<Identifier>;
    _valueSet?: Element;
    concept?: Array<CodeSystemConcept>;
    /** If code comparison is case sensitive */
    caseSensitive?: boolean;
    _copyright?: Element;
    _title?: Element;
    /** Business version of the code system (Coding.version) */
    version?: string;
    _version?: Element;
    _compositional?: Element;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    _url?: Element;
}
/** Filter that can be used in a value set */
export interface CodeSystemFilter extends BackboneElement {
    /** Code that identifies the filter */
    code: code;
    _code?: Element;
    /** How or why the filter is used */
    description?: string;
    _description?: Element;
    /** = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists */
    operator: Array<code>;
    _operator?: Array<Element>;
    /** What to use for the value */
    value: string;
    _value?: Element;
}
/** Additional representations for the concept */
export interface CodeSystemConceptDesignation extends BackboneElement {
    /** Human language of the designation */
    language?: code;
    _language?: Element;
    /** Details how this designation would be used */
    use?: Coding;
    /** The text value for this designation */
    value: string;
    _value?: Element;
}
/** grouped-by | is-a | part-of | classified-with */
export declare enum CodeSystemHierarchymeaning {
    ClassifiedWith = "classified-with",
    GroupedBy = "grouped-by",
    IsA = "is-a",
    PartOf = "part-of"
}
/** code | Coding | string | integer | boolean | dateTime | decimal */
export declare enum CodeSystemPropertyType {
    Coding = "Coding",
    Boolean = "boolean",
    Code = "code",
    DateTime = "dateTime",
    Decimal = "decimal",
    Integer = "integer",
    String = "string"
}
/** Additional information supplied about each concept */
export interface CodeSystemProperty extends BackboneElement {
    /** Identifies the property on the concepts, and when referred to in operations */
    code: code;
    _code?: Element;
    /** Formal identifier for the property */
    uri?: uri;
    _uri?: Element;
    /** Why the property is defined, and/or what it conveys */
    description?: string;
    _description?: Element;
    /** code | Coding | string | integer | boolean | dateTime | decimal */
    type: `${CodeSystemPropertyType}`;
    _type?: Element;
}
/** Concepts in the code system */
export interface CodeSystemConcept extends BackboneElement {
    _code?: Element;
    /** Formal definition */
    definition?: string;
    /** Property value for the concept */
    property?: Array<CodeSystemConceptProperty>;
    _definition?: Element;
    /** Code that identifies concept */
    code: code;
    /** Child Concepts (is-a/contains/categorizes) */
    concept?: Array<CodeSystemConcept>;
    /** Text to display to the user */
    display?: string;
    /** Additional representations for the concept */
    designation?: Array<CodeSystemConceptDesignation>;
    _display?: Element;
}
/** not-present | example | fragment | complete | supplement */
export declare enum CodeSystemContent {
    Complete = "complete",
    Example = "example",
    Fragment = "fragment",
    NotPresent = "not-present",
    Supplement = "supplement"
}
/** draft | active | retired | unknown */
export declare enum CodeSystemStatus {
    Active = "active",
    Draft = "draft",
    Retired = "retired",
    Unknown = "unknown"
}
/** Property value for the concept */
export interface CodeSystemConceptProperty extends BackboneElement {
    _code?: Element;
    valueCode: code;
    _valueBoolean: Element;
    valueDecimal: decimal;
    _valueDecimal: Element;
    _valueString: Element;
    valueString: string;
    valueBoolean: boolean;
    valueDateTime: dateTime;
    valueCoding: Coding;
    _valueDateTime: Element;
    /** Reference to CodeSystem.property.code */
    code: code;
    valueInteger: integer;
    _valueCode: Element;
    _valueInteger: Element;
}
