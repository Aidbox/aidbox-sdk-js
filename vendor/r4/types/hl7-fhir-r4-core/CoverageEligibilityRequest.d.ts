/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { positiveInt } from "./positiveInt";
import { Period } from "./Period";
import { CodeableConcept } from "./CodeableConcept";
import { SimpleQuantity } from "./SimpleQuantity";
import { dateTime } from "./dateTime";
import { DomainResource } from "./DomainResource";
import { Money } from "./Money";
import { date } from "./date";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
export interface CoverageEligibilityRequest extends DomainResource {
    resourceType: 'CoverageEligibilityRequest';
    _created?: Element;
    /** Intended recipient of products and services */
    patient: Reference<'Patient'>;
    /** Patient insurance information */
    insurance?: Array<CoverageEligibilityRequestInsurance>;
    /** Servicing facility */
    facility?: Reference<'Location'>;
    /** Author */
    enterer?: Reference<'PractitionerRole' | 'Practitioner'>;
    /** Supporting information */
    supportingInfo?: Array<CoverageEligibilityRequestSupportingInfo>;
    /** auth-requirements | benefits | discovery | validation */
    purpose: Array<code>;
    /** Item to be evaluated for eligibiity */
    item?: Array<CoverageEligibilityRequestItem>;
    _status?: Element;
    /** Creation date */
    created: dateTime;
    _purpose?: Array<Element>;
    /** Coverage issuer */
    insurer: Reference<'Organization'>;
    /** Desired processing priority */
    priority?: CodeableConcept;
    /** active | cancelled | draft | entered-in-error */
    status: `${CoverageEligibilityRequestStatus}`;
    servicedDate?: date;
    /** Business Identifier for coverage eligiblity request */
    identifier?: Array<Identifier>;
    _servicedDate?: Element;
    /** Party responsible for the request */
    provider?: Reference<'PractitionerRole' | 'Organization' | 'Practitioner'>;
    servicedPeriod?: Period;
}
/** Patient insurance information */
export interface CoverageEligibilityRequestInsurance extends BackboneElement {
    /** Applicable coverage */
    focal?: boolean;
    _focal?: Element;
    /** Insurance information */
    coverage: Reference<'Coverage'>;
    /** Additional provider contract number */
    businessArrangement?: string;
    _businessArrangement?: Element;
}
/** Supporting information */
export interface CoverageEligibilityRequestSupportingInfo extends BackboneElement {
    /** Information instance identifier */
    sequence: positiveInt;
    _sequence?: Element;
    /** Data to be provided */
    information: Reference;
    /** Applies to all items */
    appliesToAll?: boolean;
    _appliesToAll?: Element;
}
/** Applicable diagnosis */
export interface CoverageEligibilityRequestDiagnosis extends BackboneElement {
    diagnosisCodeableConcept?: CodeableConcept;
    diagnosisReference?: Reference<'Condition'>;
}
/** Item to be evaluated for eligibiity */
export interface CoverageEligibilityRequestItem extends BackboneElement {
    /** Benefit classification */
    category?: CodeableConcept;
    /** Servicing facility */
    facility?: Reference<'Organization' | 'Location'>;
    /** Applicable diagnosis */
    diagnosis?: Array<CoverageEligibilityRequestDiagnosis>;
    /** Product or service billing modifiers */
    modifier?: Array<CodeableConcept>;
    _supportingInfoSequence?: Array<Element>;
    /** Billing, service, product, or drug code */
    productOrService?: CodeableConcept;
    /** Count of products or services */
    quantity?: SimpleQuantity;
    /** Perfoming practitioner */
    provider?: Reference<'PractitionerRole' | 'Practitioner'>;
    /** Applicable exception or supporting information */
    supportingInfoSequence?: Array<positiveInt>;
    /** Fee, charge or cost per item */
    unitPrice?: Money;
    /** Product or service details */
    detail?: Array<Reference>;
}
/** active | cancelled | draft | entered-in-error */
export declare enum CoverageEligibilityRequestStatus {
    Active = "active",
    Cancelled = "cancelled",
    Draft = "draft",
    EnteredInError = "entered-in-error"
}
