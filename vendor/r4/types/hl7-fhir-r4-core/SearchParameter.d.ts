/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { DomainResource } from "./DomainResource";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { code } from "./code";
import { BackboneElement } from "./BackboneElement";
/** A search parameter that defines a named search item that can be used to search/filter on a resource. */
export interface SearchParameter extends DomainResource {
    resourceType: 'SearchParameter';
    _base?: Array<Element>;
    /** Natural language description of the search parameter */
    description: markdown;
    _code?: Element;
    /** Date last changed */
    date?: dateTime;
    /** FHIRPath expression that extracts the values */
    expression?: string;
    /** missing | exact | contains | not | text | in | not-in | below | above | type | identifier | ofType */
    modifier?: Array<code>;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** Allow multiple parameters (and) */
    multipleAnd?: boolean;
    _comparator?: Array<Element>;
    /** Intended jurisdiction for search parameter (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    _chain?: Array<Element>;
    /** Original definition for the search parameter */
    derivedFrom?: canonical;
    /** Why this search parameter is defined */
    purpose?: markdown;
    _date?: Element;
    /** Allow multiple values per parameter (or) */
    multipleOr?: boolean;
    _derivedFrom?: Element;
    /** Name for this search parameter (computer friendly) */
    name: string;
    _type?: Element;
    _status?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** XPath that extracts the values */
    xpath?: string;
    _xpathUsage?: Element;
    /** normal | phonetic | nearby | distance | other */
    xpathUsage?: `${SearchParameterXpathUsage}`;
    /** number | date | string | token | reference | composite | quantity | uri | special */
    type: `${SearchParameterType}`;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** For Composite resources to define the parts */
    component?: Array<SearchParameterComponent>;
    _expression?: Element;
    _description?: Element;
    _purpose?: Element;
    /** draft | active | retired | unknown */
    status: `${SearchParameterStatus}`;
    _target?: Array<Element>;
    _name?: Element;
    /** Chained names supported */
    chain?: Array<string>;
    _multipleOr?: Element;
    /** Canonical identifier for this search parameter, represented as a URI (globally unique) */
    url: uri;
    /** Code used in URL */
    code: code;
    /** eq | ne | gt | lt | ge | le | sa | eb | ap */
    comparator?: Array<code>;
    /** Types of resource (if a resource reference) */
    target?: Array<code>;
    /** The resource type(s) this search parameter applies to */
    base: Array<code>;
    /** Business version of the search parameter */
    version?: string;
    _version?: Element;
    _modifier?: Array<Element>;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    _xpath?: Element;
    _url?: Element;
    _multipleAnd?: Element;
}
/** normal | phonetic | nearby | distance | other */
export declare enum SearchParameterXpathUsage {
    Distance = "distance",
    Nearby = "nearby",
    Normal = "normal",
    Other = "other",
    Phonetic = "phonetic"
}
/** number | date | string | token | reference | composite | quantity | uri | special */
export declare enum SearchParameterType {
    Uri = "uri",
    Number = "number",
    Date = "date",
    Special = "special",
    Quantity = "quantity",
    String = "string",
    Composite = "composite",
    Token = "token",
    Reference = "reference"
}
/** For Composite resources to define the parts */
export interface SearchParameterComponent extends BackboneElement {
    /** Defines how the part works */
    definition: canonical;
    _definition?: Element;
    /** Subexpression relative to main expression */
    expression: string;
    _expression?: Element;
}
/** draft | active | retired | unknown */
export declare enum SearchParameterStatus {
    Active = "active",
    Draft = "draft",
    Retired = "retired",
    Unknown = "unknown"
}
