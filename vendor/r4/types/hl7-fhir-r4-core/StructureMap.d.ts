/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Address } from "./Address";
import { UsageContext } from "./UsageContext";
import { Annotation } from "./Annotation";
import { Age } from "./Age";
import { Attachment } from "./Attachment";
import { positiveInt } from "./positiveInt";
import { unsignedInt } from "./unsignedInt";
import { Period } from "./Period";
import { url } from "./url";
import { ContactDetail } from "./ContactDetail";
import { DataRequirement } from "./DataRequirement";
import { CodeableConcept } from "./CodeableConcept";
import { TriggerDefinition } from "./TriggerDefinition";
import { uri } from "./uri";
import { Count } from "./Count";
import { Expression } from "./Expression";
import { Coding } from "./Coding";
import { id } from "./id";
import { dateTime } from "./dateTime";
import { Dosage } from "./Dosage";
import { Range } from "./Range";
import { oid } from "./oid";
import { ContactPoint } from "./ContactPoint";
import { uuid } from "./uuid";
import { Signature } from "./Signature";
import { RelatedArtifact } from "./RelatedArtifact";
import { Timing } from "./Timing";
import { Meta } from "./Meta";
import { Quantity } from "./Quantity";
import { Distance } from "./Distance";
import { canonical } from "./canonical";
import { HumanName } from "./HumanName";
import { Duration } from "./Duration";
import { time } from "./time";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { Money } from "./Money";
import { SampledData } from "./SampledData";
import { date } from "./date";
import { Ratio } from "./Ratio";
import { markdown } from "./markdown";
import { ParameterDefinition } from "./ParameterDefinition";
import { base64Binary } from "./base64Binary";
import { instant } from "./instant";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
import { decimal } from "./decimal";
import { Contributor } from "./Contributor";
/** A Map of relationships between 2 structures that can be used to transform data. */
export interface StructureMap extends DomainResource {
    /** Natural language description of the structure map */
    description?: markdown;
    /** Date last changed */
    date?: dateTime;
    _import?: Array<Element>;
    /** Named sections for reader convenience */
    group: Array<StructureMapGroup>;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** Intended jurisdiction for structure map (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Why this structure map is defined */
    purpose?: markdown;
    _date?: Element;
    /** Name for this structure map (computer friendly) */
    name: string;
    _status?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Name for this structure map (human friendly) */
    title?: string;
    _description?: Element;
    _purpose?: Element;
    /** Structure Definition used by this map */
    structure?: Array<StructureMapStructure>;
    /** draft | active | retired | unknown */
    status: code;
    _name?: Element;
    /** Canonical identifier for this structure map, represented as a URI (globally unique) */
    url: uri;
    /** Additional identifier for the structure map */
    identifier?: Array<Identifier>;
    _copyright?: Element;
    _title?: Element;
    /** Business version of the structure map */
    version?: string;
    _version?: Element;
    /** Other maps used by this map (canonical URLs) */
    import?: Array<canonical>;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    _url?: Element;
}
/** Named instance provided when invoking the map */
export interface StructureMapInput extends BackboneElement {
    /** Name for this instance of data */
    name: id;
    _name?: Element;
    /** Type for this instance of data */
    type?: string;
    _type?: Element;
    /** source | target */
    mode: code;
    _mode?: Element;
    /** Documentation for this instance of data */
    documentation?: string;
    _documentation?: Element;
}
/** Named sections for reader convenience */
export interface StructureMapGroup extends BackboneElement {
    _documentation?: Element;
    /** Another group that this group adds rules to */
    extends?: id;
    _extends?: Element;
    /** none | types | type-and-types */
    typeMode: code;
    /** Human-readable label */
    name: id;
    rule: Array<StructureMapGroupRule>;
    _typeMode?: Element;
    /** Additional description/explanation for group */
    documentation?: string;
    _name?: Element;
    /** Named instance provided when invoking the map */
    input: Array<StructureMapInput>;
}
/** Structure Definition used by this map */
export interface StructureMapStructure extends BackboneElement {
    /** Canonical reference to structure definition */
    url: canonical;
    _url?: Element;
    /** source | queried | target | produced */
    mode: code;
    _mode?: Element;
    /** Name for type in this map */
    alias?: string;
    _alias?: Element;
    /** Documentation on use of structure */
    documentation?: string;
    _documentation?: Element;
}
/** Source inputs to the mapping */
export interface StructureMapGroupRuleSource extends BackboneElement {
    defaultValueTime?: time;
    _defaultValueTime?: Element;
    defaultValueDataRequirement?: DataRequirement;
    /** Specified minimum cardinality */
    min?: integer;
    defaultValueMoney?: Money;
    defaultValueContactPoint?: ContactPoint;
    _defaultValueCode?: Element;
    defaultValueMeta?: Meta;
    _defaultValueBoolean?: Element;
    defaultValueCoding?: Coding;
    /** Named context for field, if a field is specified */
    variable?: id;
    defaultValueCode?: code;
    /** Optional field for this source */
    element?: string;
    defaultValueSampledData?: SampledData;
    defaultValueMarkdown?: markdown;
    defaultValueHumanName?: HumanName;
    defaultValueDuration?: Duration;
    _defaultValueInteger?: Element;
    defaultValueDecimal?: decimal;
    defaultValueUri?: uri;
    _defaultValueString?: Element;
    /** FHIRPath expression  - must be true or the mapping engine throws an error instead of completing */
    check?: string;
    defaultValueQuantity?: Quantity;
    _defaultValueBase64Binary?: Element;
    defaultValueCount?: Count;
    _type?: Element;
    defaultValueId?: id;
    _defaultValueDecimal?: Element;
    defaultValueBase64Binary?: base64Binary;
    _defaultValueMarkdown?: Element;
    defaultValueContactDetail?: ContactDetail;
    /** Rule only applies if source has this type */
    type?: string;
    defaultValueBoolean?: boolean;
    _defaultValueUri?: Element;
    defaultValuePeriod?: Period;
    defaultValueTriggerDefinition?: TriggerDefinition;
    /** Message to put in log if source exists (FHIRPath) */
    logMessage?: string;
    defaultValueDate?: date;
    defaultValueReference?: Reference;
    defaultValueDosage?: Dosage;
    defaultValueRange?: Range;
    _defaultValueOid?: Element;
    _defaultValueInstant?: Element;
    _min?: Element;
    defaultValueInstant?: instant;
    defaultValueAttachment?: Attachment;
    _defaultValueUuid?: Element;
    defaultValueUnsignedInt?: unsignedInt;
    _logMessage?: Element;
    defaultValueDistance?: Distance;
    _condition?: Element;
    /** Specified maximum cardinality (number or *) */
    max?: string;
    defaultValueContributor?: Contributor;
    /** FHIRPath expression  - must be true or the rule does not apply */
    condition?: string;
    _defaultValuePositiveInt?: Element;
    defaultValueRatio?: Ratio;
    defaultValueCanonical?: canonical;
    defaultValueExpression?: Expression;
    defaultValueSignature?: Signature;
    _defaultValueUrl?: Element;
    _defaultValueCanonical?: Element;
    defaultValueUrl?: url;
    /** Type or variable this rule applies to */
    context: id;
    defaultValueAnnotation?: Annotation;
    defaultValueUuid?: uuid;
    defaultValueAddress?: Address;
    _check?: Element;
    defaultValueString?: string;
    _max?: Element;
    defaultValueAge?: Age;
    _element?: Element;
    defaultValueOid?: oid;
    _defaultValueDateTime?: Element;
    defaultValueUsageContext?: UsageContext;
    /** first | not_first | last | not_last | only_one */
    listMode?: code;
    defaultValueParameterDefinition?: ParameterDefinition;
    _listMode?: Element;
    defaultValueDateTime?: dateTime;
    defaultValuePositiveInt?: positiveInt;
    _defaultValueUnsignedInt?: Element;
    defaultValueInteger?: integer;
    _defaultValueId?: Element;
    defaultValueTiming?: Timing;
    defaultValueRelatedArtifact?: RelatedArtifact;
    defaultValueIdentifier?: Identifier;
    _variable?: Element;
    defaultValueCodeableConcept?: CodeableConcept;
    _defaultValueDate?: Element;
    _context?: Element;
}
/** Parameters to the transform */
export interface StructureMapGroupRuleParameter extends BackboneElement {
    _valueBoolean: Element;
    _valueId: Element;
    valueDecimal: decimal;
    _valueDecimal: Element;
    _valueString: Element;
    valueString: string;
    valueBoolean: boolean;
    valueInteger: integer;
    valueId: id;
    _valueInteger: Element;
}
/** Content to create because of this mapping rule */
export interface StructureMapGroupRuleTarget extends BackboneElement {
    /** create | copy + */
    transform?: code;
    /** Named context for field, if desired, and a field is specified */
    variable?: id;
    /** Field to create in the context */
    element?: string;
    /** Internal rule reference for shared list items */
    listRuleId?: id;
    _transform?: Element;
    /** Type or variable this rule applies to */
    context?: id;
    _element?: Element;
    /** first | share | last | collate */
    listMode?: Array<code>;
    _listRuleId?: Element;
    _listMode?: Array<Element>;
    _contextType?: Element;
    /** type | variable */
    contextType?: code;
    _variable?: Element;
    /** Parameters to the transform */
    parameter?: Array<StructureMapGroupRuleParameter>;
    _context?: Element;
}
/** Which other rules to apply in the context of this rule */
export interface StructureMapGroupRuleDependent extends BackboneElement {
    /** Name of a rule or group to apply */
    name: id;
    _name?: Element;
    /** Variable to pass to the rule or group */
    variable: Array<string>;
    _variable?: Array<Element>;
}
/** Transform Rule from source to target */
export interface StructureMapGroupRule extends BackboneElement {
    /** Name of the rule for internal references */
    name: id;
    _name?: Element;
    /** Source inputs to the mapping */
    source: Array<StructureMapGroupRuleSource>;
    /** Content to create because of this mapping rule */
    target?: Array<StructureMapGroupRuleTarget>;
    /** Rules contained in this rule */
    rule?: Array<StructureMapGroupRule>;
    /** Which other rules to apply in the context of this rule */
    dependent?: Array<StructureMapGroupRuleDependent>;
    /** Documentation for this instance of data */
    documentation?: string;
    _documentation?: Element;
}
