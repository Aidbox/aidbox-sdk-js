/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Address } from "./Address";
import { CodeableConcept } from "./CodeableConcept";
import { ContactPoint } from "./ContactPoint";
import { HumanName } from "./HumanName";
import { DomainResource } from "./DomainResource";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
/** A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc. */
export interface Organization extends DomainResource {
    resourceType: 'Organization';
    _active?: Element;
    /** An address for the organization */
    address?: Array<Address>;
    /** Name used for the organization */
    name?: string;
    /** Kind of organization */
    type?: Array<CodeableConcept>;
    /** A list of alternate names that the organization is known as, or was known as in the past */
    alias?: Array<string>;
    /** Whether the organization's record is still in active use */
    active?: boolean;
    _name?: Element;
    /** Identifies this organization  across multiple systems */
    identifier?: Array<Identifier>;
    /** A contact detail for the organization */
    telecom?: Array<ContactPoint>;
    /** The organization of which this organization forms a part */
    partOf?: Reference<'Organization'>;
    _alias?: Array<Element>;
    /** Technical endpoints providing access to services operated for the organization */
    endpoint?: Array<Reference>;
    /** Contact for the organization for a certain purpose */
    contact?: Array<OrganizationContact>;
}
/** Contact for the organization for a certain purpose */
export interface OrganizationContact extends BackboneElement {
    /** The type of contact */
    purpose?: CodeableConcept;
    /** A name associated with the contact */
    name?: HumanName;
    /** Contact details (telephone, email, etc.)  for a contact */
    telecom?: Array<ContactPoint>;
    /** Visiting or postal addresses for the contact */
    address?: Address;
}
