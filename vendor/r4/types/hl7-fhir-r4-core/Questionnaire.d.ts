/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { Attachment } from "./Attachment";
import { Period } from "./Period";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { dateTime } from "./dateTime";
import { Quantity } from "./Quantity";
import { canonical } from "./canonical";
import { time } from "./time";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { date } from "./date";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
import { decimal } from "./decimal";
/** A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
export interface Questionnaire extends DomainResource {
    resourceType: 'Questionnaire';
    /** Natural language description of the questionnaire */
    description?: markdown;
    /** Resource that can be subject of QuestionnaireResponse */
    subjectType?: Array<code>;
    /** Date last changed */
    date?: dateTime;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** When the questionnaire was approved by publisher */
    approvalDate?: date;
    /** Intended jurisdiction for questionnaire (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Instantiates protocol or definition */
    derivedFrom?: Array<canonical>;
    /** Why this questionnaire is defined */
    purpose?: markdown;
    _date?: Element;
    _derivedFrom?: Array<Element>;
    /** Name for this questionnaire (computer friendly) */
    name?: string;
    item?: Array<QuestionnaireItem>;
    _status?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    _approvalDate?: Element;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Name for this questionnaire (human friendly) */
    title?: string;
    _description?: Element;
    _purpose?: Element;
    _lastReviewDate?: Element;
    /** draft | active | retired | unknown */
    status: `${QuestionnaireStatus}`;
    _name?: Element;
    /** Canonical identifier for this questionnaire, represented as a URI (globally unique) */
    url?: uri;
    /** Concept that represents the overall questionnaire */
    code?: Array<Coding>;
    /** Additional identifier for the questionnaire */
    identifier?: Array<Identifier>;
    /** When the questionnaire was last reviewed */
    lastReviewDate?: date;
    _copyright?: Element;
    _title?: Element;
    /** Business version of the questionnaire */
    version?: string;
    _version?: Element;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    _subjectType?: Array<Element>;
    _url?: Element;
    /** When the questionnaire is expected to be used */
    effectivePeriod?: Period;
}
/** draft | active | retired | unknown */
export declare enum QuestionnaireStatus {
    Active = "active",
    Draft = "draft",
    Retired = "retired",
    Unknown = "unknown"
}
/** all | any */
export declare enum QuestionnaireItemEnableBehavior {
    All = "all",
    Any = "any"
}
/** group | display | boolean | decimal | integer | date | dateTime + */
export declare enum QuestionnaireItemType {
    Display = "display",
    Attachment = "attachment",
    Question = "question",
    Date = "date",
    Decimal = "decimal",
    Url = "url",
    Quantity = "quantity",
    Choice = "choice",
    Integer = "integer",
    String = "string",
    Text = "text",
    Group = "group",
    Reference = "reference",
    OpenChoice = "open-choice",
    Time = "time",
    DateTime = "dateTime",
    Boolean = "boolean"
}
/** exists | = | != | > | < | >= | <= */
export declare enum QuestionnaireItemOperator {
    "!=" = "!=",
    "<" = "<",
    "<=" = "<=",
    "=" = "=",
    ">" = ">",
    ">=" = ">=",
    Exists = "exists"
}
/** Only allow data when */
export interface QuestionnaireItemEnableWhen extends BackboneElement {
    _question?: Element;
    _answerString: Element;
    _operator?: Element;
    answerQuantity: Quantity;
    _answerDate: Element;
    answerDecimal: decimal;
    answerDate: date;
    _answerTime: Element;
    answerReference: Reference;
    answerInteger: integer;
    /** Question that determines whether item is enabled */
    question: string;
    answerDateTime: dateTime;
    _answerDecimal: Element;
    answerString: string;
    /** exists | = | != | > | < | >= | <= */
    operator: `${QuestionnaireItemOperator}`;
    _answerDateTime: Element;
    answerBoolean: boolean;
    answerCoding: Coding;
    _answerBoolean: Element;
    _answerInteger: Element;
    answerTime: time;
}
/** Permitted answer */
export interface QuestionnaireItemAnswerOption extends BackboneElement {
    /** Whether option is selected by default */
    initialSelected?: boolean;
    valueReference: Reference;
    valueTime: time;
    _initialSelected?: Element;
    _valueString: Element;
    valueString: string;
    valueDate: date;
    valueCoding: Coding;
    _valueTime: Element;
    _valueDate: Element;
    valueInteger: integer;
    _valueInteger: Element;
}
/** Initial value(s) when item is first rendered */
export interface QuestionnaireItemInitial extends BackboneElement {
    _valueUri: Element;
    _valueBoolean: Element;
    valueReference: Reference;
    valueUri: uri;
    valueTime: time;
    valueDecimal: decimal;
    _valueDecimal: Element;
    _valueString: Element;
    valueQuantity: Quantity;
    valueString: string;
    valueBoolean: boolean;
    valueDateTime: dateTime;
    valueDate: date;
    valueCoding: Coding;
    _valueDateTime: Element;
    _valueTime: Element;
    _valueDate: Element;
    valueInteger: integer;
    valueAttachment: Attachment;
    _valueInteger: Element;
}
/** Questions and sections within the Questionnaire */
export interface QuestionnaireItem extends BackboneElement {
    /** all | any */
    enableBehavior?: `${QuestionnaireItemEnableBehavior}`;
    /** ElementDefinition - details for the item */
    definition?: uri;
    _maxLength?: Element;
    /** Unique id for item in questionnaire */
    linkId: string;
    /** Whether the item may repeat */
    repeats?: boolean;
    _prefix?: Element;
    _definition?: Element;
    /** Nested questionnaire items */
    item?: Array<QuestionnaireItem>;
    _type?: Element;
    /** group | display | boolean | decimal | integer | date | dateTime + */
    type: `${QuestionnaireItemType}`;
    _linkId?: Element;
    /** Only allow data when */
    enableWhen?: Array<QuestionnaireItemEnableWhen>;
    _required?: Element;
    /** Permitted answer */
    answerOption?: Array<QuestionnaireItemAnswerOption>;
    /** E.g. "1(a)", "2.5.3" */
    prefix?: string;
    _readOnly?: Element;
    /** Don't allow human editing */
    readOnly?: boolean;
    /** Valueset containing permitted answers */
    answerValueSet?: canonical;
    /** Corresponding concept for this item in a terminology */
    code?: Array<Coding>;
    /** Initial value(s) when item is first rendered */
    initial?: Array<QuestionnaireItemInitial>;
    _text?: Element;
    _answerValueSet?: Element;
    /** No more than this many characters */
    maxLength?: integer;
    _repeats?: Element;
    _enableBehavior?: Element;
    /** Whether the item must be included in data results */
    required?: boolean;
    /** Primary text for the item */
    text?: string;
}
