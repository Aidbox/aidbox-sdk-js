/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Attachment } from "./Attachment";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { dateTime } from "./dateTime";
import { Quantity } from "./Quantity";
import { canonical } from "./canonical";
import { time } from "./time";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { date } from "./date";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
import { decimal } from "./decimal";
/** A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
export interface QuestionnaireResponse extends DomainResource {
    resourceType: 'QuestionnaireResponse';
    /** Form being answered */
    questionnaire?: canonical;
    /** Encounter created as part of */
    encounter?: Reference<'Encounter'>;
    item?: Array<QuestionnaireResponseItem>;
    _status?: Element;
    _authored?: Element;
    /** The person who answered the questions */
    source?: Reference<'Patient' | 'PractitionerRole' | 'Practitioner' | 'RelatedPerson'>;
    /** Person who received and recorded the answers */
    author?: Reference<'Patient' | 'PractitionerRole' | 'Organization' | 'Device' | 'Practitioner' | 'RelatedPerson'>;
    /** in-progress | completed | amended | entered-in-error | stopped */
    status: `${QuestionnaireResponseStatus}`;
    /** Unique id for this set of answers */
    identifier?: Identifier;
    /** Request fulfilled by this QuestionnaireResponse */
    basedOn?: Array<Reference>;
    /** Date the answers were gathered */
    authored?: dateTime;
    /** Part of this action */
    partOf?: Array<Reference>;
    /** The subject of the questions */
    subject?: Reference;
    _questionnaire?: Element;
}
/** in-progress | completed | amended | entered-in-error | stopped */
export declare enum QuestionnaireResponseStatus {
    Amended = "amended",
    Completed = "completed",
    EnteredInError = "entered-in-error",
    InProgress = "in-progress",
    Stopped = "stopped"
}
/** The response(s) to the question */
export interface QuestionnaireResponseItemAnswer extends BackboneElement {
    _valueUri?: Element;
    _valueBoolean?: Element;
    valueReference?: Reference;
    valueUri?: uri;
    valueTime?: time;
    valueDecimal?: decimal;
    _valueDecimal?: Element;
    _valueString?: Element;
    valueQuantity?: Quantity;
    /** Nested groups and questions */
    item?: Array<QuestionnaireResponseItem>;
    valueString?: string;
    valueBoolean?: boolean;
    valueDateTime?: dateTime;
    valueDate?: date;
    valueCoding?: Coding;
    _valueDateTime?: Element;
    _valueTime?: Element;
    _valueDate?: Element;
    valueInteger?: integer;
    valueAttachment?: Attachment;
    _valueInteger?: Element;
}
/** Groups and questions */
export interface QuestionnaireResponseItem extends BackboneElement {
    /** Pointer to specific item from Questionnaire */
    linkId: string;
    _linkId?: Element;
    /** ElementDefinition - details for the item */
    definition?: uri;
    _definition?: Element;
    /** Name for group or question text */
    text?: string;
    _text?: Element;
    /** The response(s) to the question */
    answer?: Array<QuestionnaireResponseItemAnswer>;
    /** Nested questionnaire response items */
    item?: Array<QuestionnaireResponseItem>;
}
