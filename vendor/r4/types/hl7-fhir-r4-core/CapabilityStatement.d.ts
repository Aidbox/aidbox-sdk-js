/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { unsignedInt } from "./unsignedInt";
import { url } from "./url";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { DomainResource } from "./DomainResource";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { BackboneElement } from "./BackboneElement";
/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
export interface CapabilityStatement extends DomainResource {
    resourceType: 'CapabilityStatement';
    /** Natural language description of the capability statement */
    description?: markdown;
    _kind?: Element;
    /** formats supported (xml | json | ttl | mime type) */
    format: Array<code>;
    _patchFormat?: Array<Element>;
    _imports?: Array<Element>;
    _format?: Array<Element>;
    /** Date last changed */
    date: dateTime;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** Patch formats supported */
    patchFormat?: Array<code>;
    /** FHIR Version the system supports */
    fhirVersion: `${CapabilityStatementFhirversion}`;
    /** Intended jurisdiction for capability statement (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Canonical URL of another capability statement this implements */
    instantiates?: Array<canonical>;
    /** Why this capability statement is defined */
    purpose?: markdown;
    _date?: Element;
    /** Name for this capability statement (computer friendly) */
    name?: string;
    _instantiates?: Array<Element>;
    _status?: Element;
    _fhirVersion?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Canonical URL of another capability statement this adds to */
    imports?: Array<canonical>;
    /** Name for this capability statement (human friendly) */
    title?: string;
    _description?: Element;
    /** Document definition */
    document?: Array<CapabilityStatementDocument>;
    _purpose?: Element;
    /** draft | active | retired | unknown */
    status: `${CapabilityStatementStatus}`;
    /** If messaging is supported */
    messaging?: Array<CapabilityStatementMessaging>;
    /** instance | capability | requirements */
    kind: `${CapabilityStatementKind}`;
    _name?: Element;
    /** Implementation guides supported */
    implementationGuide?: Array<canonical>;
    /** Canonical identifier for this capability statement, represented as a URI (globally unique) */
    url?: uri;
    _copyright?: Element;
    _title?: Element;
    /** Software that is covered by this capability statement */
    software?: CapabilityStatementSoftware;
    /** Business version of the capability statement */
    version?: string;
    _version?: Element;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    /** If this describes a specific instance */
    implementation?: CapabilityStatementImplementation;
    /** If the endpoint is a RESTful one */
    rest?: Array<CapabilityStatementRest>;
    _url?: Element;
    _implementationGuide?: Array<Element>;
}
/** Search parameters supported by implementation */
export interface CapabilityStatementRestResourceSearchParam extends BackboneElement {
    /** Name of search parameter */
    name: string;
    _name?: Element;
    /** Source of definition for parameter */
    definition?: canonical;
    _definition?: Element;
    /** number | date | string | token | reference | composite | quantity | uri | special */
    type: `${CapabilityStatementRestResourceSearchParamType}`;
    _type?: Element;
    /** Server-specific usage */
    documentation?: markdown;
    _documentation?: Element;
}
/** no-version | versioned | versioned-update */
export declare enum CapabilityStatementRestResourceVersioning {
    NoVersion = "no-version",
    Versioned = "versioned",
    VersionedUpdate = "versioned-update"
}
/** read | vread | update | patch | delete | history-instance | history-type | create | search-type */
export declare enum CapabilityStatementRestResourceInteractionCode {
    SearchType = "search-type",
    HistoryType = "history-type",
    Delete = "delete",
    Update = "update",
    Read = "read",
    Create = "create",
    Vread = "vread",
    HistoryInstance = "history-instance",
    Patch = "patch"
}
/** A resource type that is supported */
export declare enum CapabilityStatementRestResourceType {
    ImmunizationEvaluation = "ImmunizationEvaluation",
    Appointment = "Appointment",
    StructureMap = "StructureMap",
    CareTeam = "CareTeam",
    Linkage = "Linkage",
    Communication = "Communication",
    MedicationDispense = "MedicationDispense",
    ImagingStudy = "ImagingStudy",
    ChargeItem = "ChargeItem",
    AdverseEvent = "AdverseEvent",
    Media = "Media",
    SubstancePolymer = "SubstancePolymer",
    QuestionnaireResponse = "QuestionnaireResponse",
    Coverage = "Coverage",
    Procedure = "Procedure",
    AuditEvent = "AuditEvent",
    PaymentReconciliation = "PaymentReconciliation",
    MedicinalProductManufactured = "MedicinalProductManufactured",
    CompartmentDefinition = "CompartmentDefinition",
    Organization = "Organization",
    ExplanationOfBenefit = "ExplanationOfBenefit",
    Composition = "Composition",
    CoverageEligibilityResponse = "CoverageEligibilityResponse",
    DocumentReference = "DocumentReference",
    EventDefinition = "EventDefinition",
    SubstanceProtein = "SubstanceProtein",
    TerminologyCapabilities = "TerminologyCapabilities",
    Encounter = "Encounter",
    ImplementationGuide = "ImplementationGuide",
    EvidenceVariable = "EvidenceVariable",
    ObservationDefinition = "ObservationDefinition",
    DiagnosticReport = "DiagnosticReport",
    ExampleScenario = "ExampleScenario",
    ResearchDefinition = "ResearchDefinition",
    Parameters = "Parameters",
    SearchParameter = "SearchParameter",
    MedicinalProductInteraction = "MedicinalProductInteraction",
    CodeSystem = "CodeSystem",
    MessageDefinition = "MessageDefinition",
    NutritionOrder = "NutritionOrder",
    VerificationResult = "VerificationResult",
    MedicationAdministration = "MedicationAdministration",
    CatalogEntry = "CatalogEntry",
    Flag = "Flag",
    DeviceUseStatement = "DeviceUseStatement",
    Contract = "Contract",
    Invoice = "Invoice",
    PaymentNotice = "PaymentNotice",
    Location = "Location",
    Claim = "Claim",
    Specimen = "Specimen",
    MedicationStatement = "MedicationStatement",
    EnrollmentResponse = "EnrollmentResponse",
    Evidence = "Evidence",
    Bundle = "Bundle",
    ResearchElementDefinition = "ResearchElementDefinition",
    BodyStructure = "BodyStructure",
    MedicinalProduct = "MedicinalProduct",
    ResearchStudy = "ResearchStudy",
    AppointmentResponse = "AppointmentResponse",
    MedicinalProductIndication = "MedicinalProductIndication",
    Measure = "Measure",
    Person = "Person",
    InsurancePlan = "InsurancePlan",
    Patient = "Patient",
    EffectEvidenceSynthesis = "EffectEvidenceSynthesis",
    ResearchSubject = "ResearchSubject",
    Medication = "Medication",
    ConceptMap = "ConceptMap",
    CoverageEligibilityRequest = "CoverageEligibilityRequest",
    SubstanceSourceMaterial = "SubstanceSourceMaterial",
    VisionPrescription = "VisionPrescription",
    MolecularSequence = "MolecularSequence",
    MedicinalProductUndesirableEffect = "MedicinalProductUndesirableEffect",
    OperationOutcome = "OperationOutcome",
    MessageHeader = "MessageHeader",
    AllergyIntolerance = "AllergyIntolerance",
    SubstanceReferenceInformation = "SubstanceReferenceInformation",
    SupplyDelivery = "SupplyDelivery",
    EpisodeOfCare = "EpisodeOfCare",
    PractitionerRole = "PractitionerRole",
    Library = "Library",
    Practitioner = "Practitioner",
    MedicationRequest = "MedicationRequest",
    ImmunizationRecommendation = "ImmunizationRecommendation",
    Immunization = "Immunization",
    GraphDefinition = "GraphDefinition",
    Account = "Account",
    MedicinalProductIngredient = "MedicinalProductIngredient",
    MeasureReport = "MeasureReport",
    DeviceMetric = "DeviceMetric",
    Goal = "Goal",
    MedicationKnowledge = "MedicationKnowledge",
    ClaimResponse = "ClaimResponse",
    DeviceDefinition = "DeviceDefinition",
    Slot = "Slot",
    ValueSet = "ValueSet",
    MedicinalProductAuthorization = "MedicinalProductAuthorization",
    StructureDefinition = "StructureDefinition",
    MedicinalProductContraindication = "MedicinalProductContraindication",
    DeviceRequest = "DeviceRequest",
    List = "List",
    Questionnaire = "Questionnaire",
    DomainResource = "DomainResource",
    Endpoint = "Endpoint",
    NamingSystem = "NamingSystem",
    MedicinalProductPackaged = "MedicinalProductPackaged",
    Basic = "Basic",
    Binary = "Binary",
    PlanDefinition = "PlanDefinition",
    Subscription = "Subscription",
    RelatedPerson = "RelatedPerson",
    SubstanceSpecification = "SubstanceSpecification",
    SubstanceNucleicAcid = "SubstanceNucleicAcid",
    GuidanceResponse = "GuidanceResponse",
    ClinicalImpression = "ClinicalImpression",
    OrganizationAffiliation = "OrganizationAffiliation",
    Resource = "Resource",
    Condition = "Condition",
    CapabilityStatement = "CapabilityStatement",
    HealthcareService = "HealthcareService",
    SpecimenDefinition = "SpecimenDefinition",
    RiskAssessment = "RiskAssessment",
    OperationDefinition = "OperationDefinition",
    ActivityDefinition = "ActivityDefinition",
    Schedule = "Schedule",
    BiologicallyDerivedProduct = "BiologicallyDerivedProduct",
    Group = "Group",
    MedicinalProductPharmaceutical = "MedicinalProductPharmaceutical",
    FamilyMemberHistory = "FamilyMemberHistory",
    ServiceRequest = "ServiceRequest",
    DetectedIssue = "DetectedIssue",
    Device = "Device",
    RequestGroup = "RequestGroup",
    TestScript = "TestScript",
    RiskEvidenceSynthesis = "RiskEvidenceSynthesis",
    SupplyRequest = "SupplyRequest",
    Task = "Task",
    CommunicationRequest = "CommunicationRequest",
    EnrollmentRequest = "EnrollmentRequest",
    ChargeItemDefinition = "ChargeItemDefinition",
    Substance = "Substance",
    Provenance = "Provenance",
    Consent = "Consent",
    CarePlan = "CarePlan",
    TestReport = "TestReport",
    Observation = "Observation",
    DocumentManifest = "DocumentManifest"
}
/** client | server */
export declare enum CapabilityStatementRestMode {
    Client = "client",
    Server = "server"
}
/** Where messages should be sent */
export interface CapabilityStatementEndpoint extends BackboneElement {
    /** http | ftp | mllp + */
    protocol: Coding;
    /** Network address or identifier of the end-point */
    address: url;
    _address?: Element;
}
/** not-supported | modified-since | not-match | full-support */
export declare enum CapabilityStatementRestResourceConditionalread {
    FullSupport = "full-support",
    ModifiedSince = "modified-since",
    NotMatch = "not-match",
    NotSupported = "not-supported"
}
/** What operations are supported? */
export interface CapabilityStatementInteraction extends BackboneElement {
    /** transaction | batch | search-system | history-system */
    code: `${CapabilityStatementRestInteractionCode}`;
    _code?: Element;
    /** Anything special about operation behavior */
    documentation?: markdown;
    _documentation?: Element;
}
/** FHIR Version the system supports */
export declare enum CapabilityStatementFhirversion {
    "Num1.8.0" = "1.8.0",
    "Num0.05" = "0.05",
    "Num0.01" = "0.01",
    "Num3.0.1" = "3.0.1",
    "Num1.0.0" = "1.0.0",
    "Num3.3.0" = "3.3.0",
    "Num0.0.82" = "0.0.82",
    "Num1.6.0" = "1.6.0",
    "Num1.4.0" = "1.4.0",
    "Num3.0.0" = "3.0.0",
    "Num0.0.80" = "0.0.80",
    "Num4.0.0" = "4.0.0",
    "Num0.11" = "0.11",
    "Num0.06" = "0.06",
    "Num1.0.2" = "1.0.2",
    "Num1.0.1" = "1.0.1",
    "Num0.4.0" = "0.4.0",
    "Num4.0.1" = "4.0.1",
    "Num3.5.0" = "3.5.0",
    "Num0.5.0" = "0.5.0",
    "Num1.1.0" = "1.1.0",
    "Num0.0.81" = "0.0.81"
}
/** sender | receiver */
export declare enum CapabilityStatementMessagingSupportedmessageMode {
    Receiver = "receiver",
    Sender = "sender"
}
/** If this describes a specific instance */
export interface CapabilityStatementImplementation extends BackboneElement {
    /** Describes this specific instance */
    description: string;
    _description?: Element;
    /** Base URL for the installation */
    url?: url;
    _url?: Element;
    /** Organization that manages the data */
    custodian?: Reference<'Organization'>;
}
/** Messages supported by this system */
export interface CapabilityStatementSupportedMessage extends BackboneElement {
    /** sender | receiver */
    mode: `${CapabilityStatementMessagingSupportedmessageMode}`;
    _mode?: Element;
    /** Message supported by this system */
    definition: canonical;
    _definition?: Element;
}
/** Information about security of implementation */
export interface CapabilityStatementSecurity extends BackboneElement {
    /** Adds CORS Headers (http://enable-cors.org/) */
    cors?: boolean;
    _cors?: Element;
    /** OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates */
    service?: Array<CodeableConcept>;
    /** General description of how security works */
    description?: markdown;
    _description?: Element;
}
/** number | date | string | token | reference | composite | quantity | uri | special */
export declare enum CapabilityStatementRestResourceSearchParamType {
    Uri = "uri",
    Number = "number",
    Date = "date",
    Special = "special",
    Quantity = "quantity",
    String = "string",
    Composite = "composite",
    Token = "token",
    Reference = "reference"
}
/** producer | consumer */
export declare enum CapabilityStatementDocumentMode {
    Consumer = "consumer",
    Producer = "producer"
}
/** not-supported | single | multiple - how conditional delete is supported */
export declare enum CapabilityStatementRestResourceConditionaldelete {
    Multiple = "multiple",
    NotSupported = "not-supported",
    Single = "single"
}
/** Document definition */
export interface CapabilityStatementDocument extends BackboneElement {
    /** producer | consumer */
    mode: `${CapabilityStatementDocumentMode}`;
    _mode?: Element;
    /** Description of document support */
    documentation?: markdown;
    _documentation?: Element;
    /** Constraint on the resources used in the document */
    profile: canonical;
    _profile?: Element;
}
/** If the endpoint is a RESTful one */
export interface CapabilityStatementRest extends BackboneElement {
    _documentation?: Element;
    /** Search parameters for searching all resources */
    searchParam?: Array<CapabilityStatementRestResourceSearchParam>;
    /** Information about security of implementation */
    security?: CapabilityStatementSecurity;
    /** Definition of a system level operation */
    operation?: Array<CapabilityStatementRestResourceOperation>;
    /** client | server */
    mode: `${CapabilityStatementRestMode}`;
    _compartment?: Array<Element>;
    /** What operations are supported? */
    interaction?: Array<CapabilityStatementInteraction>;
    /** General description of implementation */
    documentation?: markdown;
    /** Resource served on the REST interface */
    resource?: Array<CapabilityStatementResource>;
    /** Compartments served/used by system */
    compartment?: Array<canonical>;
    _mode?: Element;
}
/** Definition of a resource operation */
export interface CapabilityStatementRestResourceOperation extends BackboneElement {
    /** Name by which the operation/query is invoked */
    name: string;
    _name?: Element;
    /** The defined operation/query */
    definition: canonical;
    _definition?: Element;
    /** Specific details about operation behavior */
    documentation?: markdown;
    _documentation?: Element;
}
/** If messaging is supported */
export interface CapabilityStatementMessaging extends BackboneElement {
    /** Where messages should be sent */
    endpoint?: Array<CapabilityStatementEndpoint>;
    /** Reliable Message Cache Length (min) */
    reliableCache?: unsignedInt;
    _reliableCache?: Element;
    /** Messaging interface behavior details */
    documentation?: markdown;
    _documentation?: Element;
    /** Messages supported by this system */
    supportedMessage?: Array<CapabilityStatementSupportedMessage>;
}
/** Resource served on the REST interface */
export interface CapabilityStatementResource extends BackboneElement {
    _readHistory?: Element;
    _searchRevInclude?: Array<Element>;
    /** _revinclude values supported by the server */
    searchRevInclude?: Array<string>;
    _documentation?: Element;
    searchParam?: Array<CapabilityStatementRestResourceSearchParam>;
    /** If allows/uses conditional update */
    conditionalUpdate?: boolean;
    _updateCreate?: Element;
    _conditionalCreate?: Element;
    /** not-supported | modified-since | not-match | full-support */
    conditionalRead?: `${CapabilityStatementRestResourceConditionalread}`;
    _type?: Element;
    operation?: Array<CapabilityStatementRestResourceOperation>;
    _conditionalUpdate?: Element;
    /** literal | logical | resolves | enforced | local */
    referencePolicy?: Array<code>;
    /** Whether vRead can return past versions */
    readHistory?: boolean;
    /** A resource type that is supported */
    type: `${CapabilityStatementRestResourceType}`;
    /** What operations are supported? */
    interaction?: Array<CapabilityStatementInteraction>;
    _conditionalRead?: Element;
    /** Additional information about the use of the resource type */
    documentation?: markdown;
    /** If update can commit to a new identity */
    updateCreate?: boolean;
    _profile?: Element;
    _conditionalDelete?: Element;
    /** If allows/uses conditional create */
    conditionalCreate?: boolean;
    /** Profiles for use cases supported */
    supportedProfile?: Array<canonical>;
    _referencePolicy?: Array<Element>;
    _searchInclude?: Array<Element>;
    /** _include values supported by the server */
    searchInclude?: Array<string>;
    /** no-version | versioned | versioned-update */
    versioning?: `${CapabilityStatementRestResourceVersioning}`;
    /** Base System profile for all uses of resource */
    profile?: canonical;
    _versioning?: Element;
    _supportedProfile?: Array<Element>;
    /** not-supported | single | multiple - how conditional delete is supported */
    conditionalDelete?: `${CapabilityStatementRestResourceConditionaldelete}`;
}
/** draft | active | retired | unknown */
export declare enum CapabilityStatementStatus {
    Active = "active",
    Draft = "draft",
    Retired = "retired",
    Unknown = "unknown"
}
/** instance | capability | requirements */
export declare enum CapabilityStatementKind {
    Capability = "capability",
    Instance = "instance",
    Requirements = "requirements"
}
/** transaction | batch | search-system | history-system */
export declare enum CapabilityStatementRestInteractionCode {
    SearchSystem = "search-system",
    Transaction = "transaction",
    Batch = "batch",
    HistorySystem = "history-system"
}
/** Software that is covered by this capability statement */
export interface CapabilityStatementSoftware extends BackboneElement {
    /** A name the software is known by */
    name: string;
    _name?: Element;
    /** Version covered by this statement */
    version?: string;
    _version?: Element;
    /** Date this version was released */
    releaseDate?: dateTime;
    _releaseDate?: Element;
}
