/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { unsignedInt } from "./unsignedInt";
import { url } from "./url";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { DomainResource } from "./DomainResource";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { code } from "./code";
import { BackboneElement } from "./BackboneElement";
/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
export interface CapabilityStatement extends DomainResource {
    /** Natural language description of the capability statement */
    description?: markdown;
    _kind?: Element;
    /** formats supported (xml | json | ttl | mime type) */
    format: Array<code>;
    _patchFormat?: Array<Element>;
    _imports?: Array<Element>;
    _format?: Array<Element>;
    /** Date last changed */
    date: dateTime;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** Patch formats supported */
    patchFormat?: Array<code>;
    /** FHIR Version the system supports */
    fhirVersion: code;
    /** Intended jurisdiction for capability statement (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Canonical URL of another capability statement this implements */
    instantiates?: Array<canonical>;
    /** Why this capability statement is defined */
    purpose?: markdown;
    _date?: Element;
    /** Name for this capability statement (computer friendly) */
    name?: string;
    _instantiates?: Array<Element>;
    _status?: Element;
    _fhirVersion?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Canonical URL of another capability statement this adds to */
    imports?: Array<canonical>;
    /** Name for this capability statement (human friendly) */
    title?: string;
    _description?: Element;
    /** Document definition */
    document?: Array<CapabilityStatementDocument>;
    _purpose?: Element;
    /** draft | active | retired | unknown */
    status: code;
    /** If messaging is supported */
    messaging?: Array<CapabilityStatementMessaging>;
    /** instance | capability | requirements */
    kind: code;
    _name?: Element;
    /** Implementation guides supported */
    implementationGuide?: Array<canonical>;
    /** Canonical identifier for this capability statement, represented as a URI (globally unique) */
    url?: uri;
    _copyright?: Element;
    _title?: Element;
    /** Software that is covered by this capability statement */
    software?: CapabilityStatementSoftware;
    /** Business version of the capability statement */
    version?: string;
    _version?: Element;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    /** If this describes a specific instance */
    implementation?: CapabilityStatementImplementation;
    /** If the endpoint is a RESTful one */
    rest?: Array<CapabilityStatementRest>;
    _url?: Element;
    _implementationGuide?: Array<Element>;
}
/** Search parameters supported by implementation */
export interface CapabilityStatementRestResourceSearchParam extends BackboneElement {
    /** Name of search parameter */
    name: string;
    _name?: Element;
    /** Source of definition for parameter */
    definition?: canonical;
    _definition?: Element;
    /** number | date | string | token | reference | composite | quantity | uri | special */
    type: code;
    _type?: Element;
    /** Server-specific usage */
    documentation?: markdown;
    _documentation?: Element;
}
/** Where messages should be sent */
export interface CapabilityStatementEndpoint extends BackboneElement {
    /** http | ftp | mllp + */
    protocol: Coding;
    /** Network address or identifier of the end-point */
    address: url;
    _address?: Element;
}
/** What operations are supported? */
export interface CapabilityStatementInteraction extends BackboneElement {
    /** transaction | batch | search-system | history-system */
    code: code;
    _code?: Element;
    /** Anything special about operation behavior */
    documentation?: markdown;
    _documentation?: Element;
}
/** If this describes a specific instance */
export interface CapabilityStatementImplementation extends BackboneElement {
    /** Describes this specific instance */
    description: string;
    _description?: Element;
    /** Base URL for the installation */
    url?: url;
    _url?: Element;
    /** Organization that manages the data */
    custodian?: Reference<"Organization">;
}
/** Messages supported by this system */
export interface CapabilityStatementSupportedMessage extends BackboneElement {
    /** sender | receiver */
    mode: code;
    _mode?: Element;
    /** Message supported by this system */
    definition: canonical;
    _definition?: Element;
}
/** Information about security of implementation */
export interface CapabilityStatementSecurity extends BackboneElement {
    /** Adds CORS Headers (http://enable-cors.org/) */
    cors?: boolean;
    _cors?: Element;
    /** OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates */
    service?: Array<CodeableConcept>;
    /** General description of how security works */
    description?: markdown;
    _description?: Element;
}
/** Document definition */
export interface CapabilityStatementDocument extends BackboneElement {
    /** producer | consumer */
    mode: code;
    _mode?: Element;
    /** Description of document support */
    documentation?: markdown;
    _documentation?: Element;
    /** Constraint on the resources used in the document */
    profile: canonical;
    _profile?: Element;
}
/** If the endpoint is a RESTful one */
export interface CapabilityStatementRest extends BackboneElement {
    _documentation?: Element;
    /** Search parameters for searching all resources */
    searchParam?: Array<CapabilityStatementRestResourceSearchParam>;
    /** Information about security of implementation */
    security?: CapabilityStatementSecurity;
    /** Definition of a system level operation */
    operation?: Array<CapabilityStatementRestResourceOperation>;
    /** client | server */
    mode: code;
    _compartment?: Array<Element>;
    /** What operations are supported? */
    interaction?: Array<CapabilityStatementInteraction>;
    /** General description of implementation */
    documentation?: markdown;
    /** Resource served on the REST interface */
    resource?: Array<CapabilityStatementResource>;
    /** Compartments served/used by system */
    compartment?: Array<canonical>;
    _mode?: Element;
}
/** Definition of a resource operation */
export interface CapabilityStatementRestResourceOperation extends BackboneElement {
    /** Name by which the operation/query is invoked */
    name: string;
    _name?: Element;
    /** The defined operation/query */
    definition: canonical;
    _definition?: Element;
    /** Specific details about operation behavior */
    documentation?: markdown;
    _documentation?: Element;
}
/** If messaging is supported */
export interface CapabilityStatementMessaging extends BackboneElement {
    /** Where messages should be sent */
    endpoint?: Array<CapabilityStatementEndpoint>;
    /** Reliable Message Cache Length (min) */
    reliableCache?: unsignedInt;
    _reliableCache?: Element;
    /** Messaging interface behavior details */
    documentation?: markdown;
    _documentation?: Element;
    /** Messages supported by this system */
    supportedMessage?: Array<CapabilityStatementSupportedMessage>;
}
/** Resource served on the REST interface */
export interface CapabilityStatementResource extends BackboneElement {
    _readHistory?: Element;
    _searchRevInclude?: Array<Element>;
    /** _revinclude values supported by the server */
    searchRevInclude?: Array<string>;
    _documentation?: Element;
    searchParam?: Array<CapabilityStatementRestResourceSearchParam>;
    /** If allows/uses conditional update */
    conditionalUpdate?: boolean;
    _updateCreate?: Element;
    _conditionalCreate?: Element;
    /** not-supported | modified-since | not-match | full-support */
    conditionalRead?: code;
    _type?: Element;
    operation?: Array<CapabilityStatementRestResourceOperation>;
    _conditionalUpdate?: Element;
    /** literal | logical | resolves | enforced | local */
    referencePolicy?: Array<code>;
    /** Whether vRead can return past versions */
    readHistory?: boolean;
    /** A resource type that is supported */
    type: code;
    /** What operations are supported? */
    interaction?: Array<CapabilityStatementInteraction>;
    _conditionalRead?: Element;
    /** Additional information about the use of the resource type */
    documentation?: markdown;
    /** If update can commit to a new identity */
    updateCreate?: boolean;
    _profile?: Element;
    _conditionalDelete?: Element;
    /** If allows/uses conditional create */
    conditionalCreate?: boolean;
    /** Profiles for use cases supported */
    supportedProfile?: Array<canonical>;
    _referencePolicy?: Array<Element>;
    _searchInclude?: Array<Element>;
    /** _include values supported by the server */
    searchInclude?: Array<string>;
    /** no-version | versioned | versioned-update */
    versioning?: code;
    /** Base System profile for all uses of resource */
    profile?: canonical;
    _versioning?: Element;
    _supportedProfile?: Array<Element>;
    /** not-supported | single | multiple - how conditional delete is supported */
    conditionalDelete?: code;
}
/** Software that is covered by this capability statement */
export interface CapabilityStatementSoftware extends BackboneElement {
    /** A name the software is known by */
    name: string;
    _name?: Element;
    /** Version covered by this statement */
    version?: string;
    _version?: Element;
    /** Date this version was released */
    releaseDate?: dateTime;
    _releaseDate?: Element;
}
