/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { UsageContext } from "./UsageContext";
import { ContactDetail } from "./ContactDetail";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { Coding } from "./Coding";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { integer } from "./integer";
import { DomainResource } from "./DomainResource";
import { date } from "./date";
import { markdown } from "./markdown";
import { Element } from "./Element";
import { code } from "./code";
import { Identifier } from "./Identifier";
import { BackboneElement } from "./BackboneElement";
import { decimal } from "./decimal";
/** A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html). */
export interface ValueSet extends DomainResource {
    resourceType: 'ValueSet';
    /** Natural language description of the value set */
    description?: markdown;
    /** Content logical definition of the value set (CLD) */
    compose?: ValueSetCompose;
    /** Date last changed */
    date?: dateTime;
    /** Name of the publisher (organization or individual) */
    publisher?: string;
    /** Intended jurisdiction for value set (if applicable) */
    jurisdiction?: Array<CodeableConcept>;
    _publisher?: Element;
    /** Why this value set is defined */
    purpose?: markdown;
    _date?: Element;
    /** Name for this value set (computer friendly) */
    name?: string;
    _status?: Element;
    _experimental?: Element;
    /** The context that the content is intended to support */
    useContext?: Array<UsageContext>;
    /** Use and/or publishing restrictions */
    copyright?: markdown;
    /** For testing purposes, not real usage */
    experimental?: boolean;
    /** Used when the value set is "expanded" */
    expansion?: ValueSetExpansion;
    /** Name for this value set (human friendly) */
    title?: string;
    _description?: Element;
    _purpose?: Element;
    /** draft | active | retired | unknown */
    status: `${ValueSetStatus}`;
    _immutable?: Element;
    _name?: Element;
    /** Canonical identifier for this value set, represented as a URI (globally unique) */
    url?: uri;
    /** Additional identifier for the value set (business identifier) */
    identifier?: Array<Identifier>;
    /** Indicates whether or not any change to the content logical definition may occur */
    immutable?: boolean;
    _copyright?: Element;
    _title?: Element;
    /** Business version of the value set */
    version?: string;
    _version?: Element;
    /** Contact details for the publisher */
    contact?: Array<ContactDetail>;
    _url?: Element;
}
/** draft | active | retired | unknown */
export declare enum ValueSetStatus {
    Active = "active",
    Draft = "draft",
    Retired = "retired",
    Unknown = "unknown"
}
/** Used when the value set is "expanded" */
export interface ValueSetExpansion extends BackboneElement {
    contains?: Array<ValueSetExpansionContains>;
    _timestamp?: Element;
    _offset?: Element;
    /** Offset at which this resource starts */
    offset?: integer;
    /** Total number of codes in the expansion */
    total?: integer;
    _identifier?: Element;
    /** Identifies the value set expansion (business identifier) */
    identifier?: uri;
    /** Time ValueSet expansion happened */
    timestamp: dateTime;
    /** Parameter that controlled the expansion process */
    parameter?: Array<ValueSetParameter>;
    _total?: Element;
}
/** Content logical definition of the value set (CLD) */
export interface ValueSetCompose extends BackboneElement {
    /** Fixed date for references with no specified version (transitive) */
    lockedDate?: date;
    _lockedDate?: Element;
    /** Whether inactive codes are in the value set */
    inactive?: boolean;
    _inactive?: Element;
    include: Array<ValueSetComposeInclude>;
    /** Explicitly exclude codes from a code system or other value sets */
    exclude?: Array<ValueSetComposeInclude>;
}
/** Select codes/concepts by their properties (including relationships) */
export interface ValueSetComposeIncludeFilter extends BackboneElement {
    /** A property/filter defined by the code system */
    property: code;
    _property?: Element;
    /** = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists */
    op: `${ValueSetComposeIncludeFilterOp}`;
    _op?: Element;
    /** Code from the system, or regex criteria, or boolean value for exists */
    value: string;
    _value?: Element;
}
/** A concept defined in the system */
export interface ValueSetComposeIncludeConcept extends BackboneElement {
    /** Code or expression from system */
    code: code;
    _code?: Element;
    /** Text to display for this code for this value set in this valueset */
    display?: string;
    _display?: Element;
    designation?: Array<ValueSetComposeIncludeConceptDesignation>;
}
/** Parameter that controlled the expansion process */
export interface ValueSetParameter extends BackboneElement {
    _valueUri?: Element;
    valueCode?: code;
    _valueBoolean?: Element;
    valueUri?: uri;
    valueDecimal?: decimal;
    _valueDecimal?: Element;
    /** Name as assigned by the client or server */
    name: string;
    _valueString?: Element;
    valueString?: string;
    valueBoolean?: boolean;
    valueDateTime?: dateTime;
    _valueDateTime?: Element;
    _name?: Element;
    valueInteger?: integer;
    _valueCode?: Element;
    _valueInteger?: Element;
}
/** Codes in the value set */
export interface ValueSetExpansionContains extends BackboneElement {
    /** If concept is inactive in the code system */
    inactive?: boolean;
    _code?: Element;
    /** System value for the code */
    system?: uri;
    /** Codes contained under this entry */
    contains?: Array<ValueSetExpansionContains>;
    /** If user cannot select this entry */
    abstract?: boolean;
    _abstract?: Element;
    /** Code - if blank, this is not a selectable code */
    code?: code;
    /** User display for the concept */
    display?: string;
    /** Additional representations for this item */
    designation?: Array<ValueSetComposeIncludeConceptDesignation>;
    _system?: Element;
    /** Version in which this code/display is defined */
    version?: string;
    _version?: Element;
    _display?: Element;
    _inactive?: Element;
}
/** Include one or more codes from a code system or other value set(s) */
export interface ValueSetComposeInclude extends BackboneElement {
    /** The system the codes come from */
    system?: uri;
    _system?: Element;
    /** Specific version of the code system referred to */
    version?: string;
    _version?: Element;
    /** A concept defined in the system */
    concept?: Array<ValueSetComposeIncludeConcept>;
    /** Select codes/concepts by their properties (including relationships) */
    filter?: Array<ValueSetComposeIncludeFilter>;
    /** Select the contents included in this value set */
    valueSet?: Array<canonical>;
    _valueSet?: Array<Element>;
}
/** Additional representations for this concept */
export interface ValueSetComposeIncludeConceptDesignation extends BackboneElement {
    /** Human language of the designation */
    language?: code;
    _language?: Element;
    /** Types of uses of designations */
    use?: Coding;
    /** The text value for this designation */
    value: string;
    _value?: Element;
}
/** = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists */
export declare enum ValueSetComposeIncludeFilterOp {
    Exists = "exists",
    In = "in",
    IsNotA = "is-not-a",
    "=" = "=",
    Generalizes = "generalizes",
    DescendentOf = "descendent-of",
    Regex = "regex",
    IsA = "is-a",
    NotIn = "not-in"
}
