/** GENERATED BY zen-cli
DON'T MODIFY MANUALLY */
import { Annotation } from "./Annotation";
import { DataRequirement } from "./DataRequirement";
import { CodeableConcept } from "./CodeableConcept";
import { uri } from "./uri";
import { dateTime } from "./dateTime";
import { canonical } from "./canonical";
import { DomainResource } from "./DomainResource";
import { Element } from "./Element";
import { Reference } from "./Reference";
import { Identifier } from "./Identifier";
/** A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken. */
export interface GuidanceResponse extends DomainResource {
    resourceType: 'GuidanceResponse';
    /** Additional required data */
    dataRequirement?: Array<DataRequirement>;
    moduleCanonical: canonical;
    /** Encounter during which the response was returned */
    encounter?: Reference<'Encounter'>;
    _status?: Element;
    /** Why guidance is needed */
    reasonCode?: Array<CodeableConcept>;
    /** The output parameters of the evaluation, if any */
    outputParameters?: Reference<'Parameters'>;
    /** Messages resulting from the evaluation of the artifact or artifacts */
    evaluationMessage?: Array<Reference>;
    /** The identifier of the request associated with this response, if any */
    requestIdentifier?: Identifier;
    _moduleUri: Element;
    /** Additional notes about the response */
    note?: Array<Annotation>;
    _moduleCanonical: Element;
    /** success | data-requested | data-required | in-progress | failure | entered-in-error */
    status: `${GuidanceResponseStatus}`;
    /** Proposed actions, if any */
    result?: Reference<'RequestGroup' | 'CarePlan'>;
    /** Business identifier */
    identifier?: Array<Identifier>;
    moduleCodeableConcept: CodeableConcept;
    moduleUri: uri;
    /** When the guidance response was processed */
    occurrenceDateTime?: dateTime;
    /** Patient the request was performed for */
    subject?: Reference<'Patient' | 'Group'>;
    /** Device returning the guidance */
    performer?: Reference<'Device'>;
    /** Why guidance is needed */
    reasonReference?: Array<Reference>;
    _occurrenceDateTime?: Element;
}
/** success | data-requested | data-required | in-progress | failure | entered-in-error */
export declare enum GuidanceResponseStatus {
    DataRequested = "data-requested",
    DataRequired = "data-required",
    EnteredInError = "entered-in-error",
    Failure = "failure",
    InProgress = "in-progress",
    Success = "success"
}
